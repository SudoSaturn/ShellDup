// Code generated by go_code.py; DO NOT EDIT.

package query_terminal
import "fmt"
import "github.com/kovidgoyal/kitty/tools/cli"
var _ = fmt.Sprintf
func create_cmd(root *cli.Command, run_func func(*cli.Command, *Options, []string)(int, error)) {
ans := root.AddSubCommand(&cli.Command{
Name: "query_terminal",
ShortDescription: "Query the terminal for various capabilities",
Usage: "[options] [query1 query2 ...]",
HelpText: "Query the terminal this kitten is run in for various capabilities. This sends\nescape codes to the terminal and based on its response prints out data about\nsupported capabilities. Note that this is a blocking operation, since it has to\nwait for a response from the terminal. You can control the maximum wait time via\nthe :code:`--wait-for` option.\n\nThe output is lines of the form::\n\n    query: data\n\nIf a particular :italic:`query` is unsupported by the running kitty version, the\n:italic:`data` will be blank.\n\nNote that when calling this from another program, be very careful not to perform\nany I/O on the terminal device until this kitten exits.\n\nAvailable queries are:\n\n:code:`name`:\n  Terminal name (e.g. :code:`xterm-kitty`)\n\n:code:`version`:\n  Terminal version (e.g. :code:`0.43.1`)\n\n:code:`allow_hyperlinks`:\n  The config option :opt:`allow_hyperlinks` in :file:`kitty.conf` for allowing hyperlinks can be :code:`yes`, :code:`no` or :code:`ask`\n\n:code:`font_family`:\n  The current font's PostScript name\n\n:code:`bold_font`:\n  The current bold font's PostScript name\n\n:code:`italic_font`:\n  The current italic font's PostScript name\n\n:code:`bold_italic_font`:\n  The current bold-italic font's PostScript name\n\n:code:`font_size`:\n  The current font size in pts\n\n:code:`dpi_x`:\n  The current DPI on the x-axis\n\n:code:`dpi_y`:\n  The current DPI on the y-axis\n\n:code:`foreground`:\n  The current foreground color as a 24-bit # color code\n\n:code:`background`:\n  The current background color as a 24-bit # color code\n\n:code:`background_opacity`:\n  The current background opacity as a number between 0 and 1\n\n:code:`clipboard_control`:\n  The config option :opt:`clipboard_control` in :file:`kitty.conf` for allowing reads/writes to/from the clipboard\n\n:code:`os_name`:\n  The name of the OS the terminal is running on. kitty returns values: bsd, linux, macos, unknown\n\n\n",
Run: func(cmd *cli.Command, args []string) (int, error) {
opts := Options{}
err := cmd.GetOptionValues(&opts)
if err != nil { return 1, err }
return run_func(cmd, &opts, args)},
Hidden: true,
})
ans.Add(cli.OptionSpec{
            Name: "--wait-for",
            Type: "float",
            Dest: "WaitFor",
            Help: "The amount of time (in seconds) to wait for a response from the terminal, after querying it.",
        
	Default: "10",
})
clone := root.AddClone(ans.Group, ans)
clone.Hidden = false
clone.Name = "query-terminal"
}
type Options struct {
WaitFor float64
}
func (opts Options) AsCommandLine() (ans []string) {
	 sval := ""
	 _ = sval
	sval = fmt.Sprintf(`%f`, opts.WaitFor)
	if (sval != `10`) { ans = append(ans, `--wait-for=` + sval)}
return
}
