// Code generated by go_code.py; DO NOT EDIT.

package ask
import "fmt"
import "github.com/kovidgoyal/kitty/tools/cli"
var _ = fmt.Sprintf
func create_cmd(root *cli.Command, run_func func(*cli.Command, *Options, []string)(int, error)) {
ans := root.AddSubCommand(&cli.Command{
Name: "ask",
ShortDescription: "Ask the user for input",
HelpText: "Ask the user for input",
Run: func(cmd *cli.Command, args []string) (int, error) {
opts := Options{}
err := cmd.GetOptionValues(&opts)
if err != nil { return 1, err }
return run_func(cmd, &opts, args)},
})
ans.Add(cli.OptionSpec{
            Name: "--type -t",
            Type: "choices",
            Dest: "Type",
            Help: "Type of input. Defaults to asking for a line of text.",
        
Choices: "line, choices, file, password, yesno",

Completer: cli.NamesCompleter("Choices for type", "line", "choices", "file", "password", "yesno"),
	Default: "line",
})
ans.Add(cli.OptionSpec{
            Name: "--message -m",
            Type: "",
            Dest: "Message",
            Help: "The message to display to the user. If not specified a default message is shown.",
        })
ans.Add(cli.OptionSpec{
            Name: "--name -n",
            Type: "",
            Dest: "Name",
            Help: "The name for this question. Used to store history of previous answers which can be used for completions and via the browse history readline bindings.",
        })
ans.Add(cli.OptionSpec{
            Name: "--title --window-title",
            Type: "",
            Dest: "Title",
            Help: "The title for the window in which the question is displayed. Only implemented for yesno and choices types.",
        })
ans.Add(cli.OptionSpec{
            Name: "--choice -c",
            Type: "list",
            Dest: "Choices",
            Help: "A choice for the choices type. Can be specified multiple times. Every choice has the syntax: ``letter[;color]:text``, where :italic:`text` is the choice text and :italic:`letter` is the selection key. :italic:`letter` is a single letter belonging to :italic:`text`. This letter is highlighted within the choice text. There can be an optional color specification after the letter to indicate what color it should be. For example: :code:`y:Yes` and :code:`n;red:No`",
        })
ans.Add(cli.OptionSpec{
            Name: "--default -d",
            Type: "",
            Dest: "Default",
            Help: "A default choice or text. If unspecified, it is :code:`y` for the type :code:`yesno`, the first choice for :code:`choices` and empty for others types. The default choice is selected when the user presses the :kbd:`Enter` key.",
        })
ans.Add(cli.OptionSpec{
            Name: "--prompt -p",
            Type: "",
            Dest: "Prompt",
            Help: "The prompt to use when inputting a line of text or a password.",
        
	Default: "\"> \"",
})
ans.Add(cli.OptionSpec{
            Name: "--unhide-key",
            Type: "",
            Dest: "UnhideKey",
            Help: "The key to be pressed to unhide hidden text",
        
	Default: "u",
})
ans.Add(cli.OptionSpec{
            Name: "--hidden-text-placeholder",
            Type: "",
            Dest: "HiddenTextPlaceholder",
            Help: "The text in the message to be replaced by hidden text. The hidden text is read via STDIN.",
        })
}
type Options struct {
Type string
Message string
Name string
Title string
Choices []string
Default string
Prompt string
UnhideKey string
HiddenTextPlaceholder string
}
func (opts Options) AsCommandLine() (ans []string) {
	 sval := ""
	 _ = sval
	sval = opts.Type
	if (sval != "line") { ans = append(ans, `--type=` + sval)}
	sval = opts.Message
	if (sval != "") { ans = append(ans, `--message=` + sval)}
	sval = opts.Name
	if (sval != "") { ans = append(ans, `--name=` + sval)}
	sval = opts.Title
	if (sval != "") { ans = append(ans, `--title=` + sval)}
		for _, x := range opts.Choices { ans = append(ans, `--choice=` + x) }
	sval = opts.Default
	if (sval != "") { ans = append(ans, `--default=` + sval)}
	sval = opts.Prompt
	if (sval != "\"> \"") { ans = append(ans, `--prompt=` + sval)}
	sval = opts.UnhideKey
	if (sval != "u") { ans = append(ans, `--unhide-key=` + sval)}
	sval = opts.HiddenTextPlaceholder
	if (sval != "") { ans = append(ans, `--hidden-text-placeholder=` + sval)}
return
}
