// Code generated by go_code.py; DO NOT EDIT.

package unicode_input
import "fmt"
import "github.com/kovidgoyal/kitty/tools/cli"
var _ = fmt.Sprintf
func create_cmd(root *cli.Command, run_func func(*cli.Command, *Options, []string)(int, error)) {
ans := root.AddSubCommand(&cli.Command{
Name: "unicode_input",
ShortDescription: "Browse and select unicode characters by name",
HelpText: "Input a Unicode character",
Run: func(cmd *cli.Command, args []string) (int, error) {
opts := Options{}
err := cmd.GetOptionValues(&opts)
if err != nil { return 1, err }
return run_func(cmd, &opts, args)},
Hidden: true,
})
ans.Add(cli.OptionSpec{
            Name: "--emoji-variation",
            Type: "choices",
            Dest: "EmojiVariation",
            Help: "Whether to use the textual or the graphical form for emoji. By default the default form specified in the Unicode standard for the symbol is used.",
        
Choices: "none, graphic, text",

Completer: cli.NamesCompleter("Choices for emoji-variation", "none", "graphic", "text"),
	Default: "none",
})
ans.Add(cli.OptionSpec{
            Name: "--tab",
            Type: "choices",
            Dest: "Tab",
            Help: "The initial tab to display. Defaults to using the tab from the previous kitten invocation.",
        
Choices: "previous, code, emoticons, favorites, name",

Completer: cli.NamesCompleter("Choices for tab", "previous", "code", "emoticons", "favorites", "name"),
	Default: "previous",
})
clone := root.AddClone(ans.Group, ans)
clone.Hidden = false
clone.Name = "unicode-input"
}
type Options struct {
EmojiVariation string
Tab string
}
func (opts Options) AsCommandLine() (ans []string) {
	 sval := ""
	 _ = sval
	sval = opts.EmojiVariation
	if (sval != "none") { ans = append(ans, `--emoji-variation=` + sval)}
	sval = opts.Tab
	if (sval != "previous") { ans = append(ans, `--tab=` + sval)}
return
}
