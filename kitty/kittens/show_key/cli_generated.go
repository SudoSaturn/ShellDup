// Code generated by go_code.py; DO NOT EDIT.

package show_key
import "fmt"
import "github.com/kovidgoyal/kitty/tools/cli"
var _ = fmt.Sprintf
func create_cmd(root *cli.Command, run_func func(*cli.Command, *Options, []string)(int, error)) {
ans := root.AddSubCommand(&cli.Command{
Name: "show_key",
ShortDescription: "Show the codes generated by the terminal for key presses in various keyboard modes",
HelpText: "Show the codes generated by the terminal for key presses in various keyboard modes",
Run: func(cmd *cli.Command, args []string) (int, error) {
opts := Options{}
err := cmd.GetOptionValues(&opts)
if err != nil { return 1, err }
return run_func(cmd, &opts, args)},
Hidden: true,
})
ans.Add(cli.OptionSpec{
            Name: "--key-mode -m",
            Type: "choices",
            Dest: "KeyMode",
            Help: "The keyboard mode to use when showing keys. :code:`normal` mode is with DECCKM reset and :code:`application` mode is with DECCKM set. :code:`kitty` is the full kitty extended keyboard protocol.",
        
Choices: "normal, application, kitty, unchanged",

Completer: cli.NamesCompleter("Choices for key-mode", "normal", "application", "kitty", "unchanged"),
	Default: "normal",
})
clone := root.AddClone(ans.Group, ans)
clone.Hidden = false
clone.Name = "show-key"
}
type Options struct {
KeyMode string
}
func (opts Options) AsCommandLine() (ans []string) {
	 sval := ""
	 _ = sval
	sval = opts.KeyMode
	if (sval != "normal") { ans = append(ans, `--key-mode=` + sval)}
return
}
