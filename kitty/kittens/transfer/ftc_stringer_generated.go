// Code generated by go_code.py; DO NOT EDIT.

package transfer
import "fmt"
import "encoding/json"

func (self Action) String() string {
switch self {
default: return "invalid"
case Action_file: return "file"
case Action_data: return "data"
case Action_end_data: return "end_data"
case Action_receive: return "receive"
case Action_send: return "send"
case Action_cancel: return "cancel"
case Action_status: return "status"
case Action_finish: return "finish"
}}
func (self Action) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func Action_from_string(x string) (ans Action, err error) {
switch x {
case "invalid": return Action_invalid, nil
case "file": return Action_file, nil
case "data": return Action_data, nil
case "end_data": return Action_end_data, nil
case "receive": return Action_receive, nil
case "send": return Action_send, nil
case "cancel": return Action_cancel, nil
case "status": return Action_status, nil
case "finish": return Action_finish, nil
}
err = fmt.Errorf("unknown value for enum Action: %#v", x)
return
}
func (self *Action) SetString(x string) error {
s, err := Action_from_string(x); if err == nil { *self = s }; return err}
func (self *Action) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self Compression) String() string {
switch self {
default: return "none"
case Compression_zlib: return "zlib"
}}
func (self Compression) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func Compression_from_string(x string) (ans Compression, err error) {
switch x {
case "none": return Compression_none, nil
case "zlib": return Compression_zlib, nil
}
err = fmt.Errorf("unknown value for enum Compression: %#v", x)
return
}
func (self *Compression) SetString(x string) error {
s, err := Compression_from_string(x); if err == nil { *self = s }; return err}
func (self *Compression) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self FileType) String() string {
switch self {
default: return "regular"
case FileType_symlink: return "symlink"
case FileType_directory: return "directory"
case FileType_link: return "link"
}}
func (self FileType) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func FileType_from_string(x string) (ans FileType, err error) {
switch x {
case "regular": return FileType_regular, nil
case "symlink": return FileType_symlink, nil
case "directory": return FileType_directory, nil
case "link": return FileType_link, nil
}
err = fmt.Errorf("unknown value for enum FileType: %#v", x)
return
}
func (self *FileType) SetString(x string) error {
s, err := FileType_from_string(x); if err == nil { *self = s }; return err}
func (self *FileType) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self TransmissionType) String() string {
switch self {
default: return "simple"
case TransmissionType_rsync: return "rsync"
}}
func (self TransmissionType) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func TransmissionType_from_string(x string) (ans TransmissionType, err error) {
switch x {
case "simple": return TransmissionType_simple, nil
case "rsync": return TransmissionType_rsync, nil
}
err = fmt.Errorf("unknown value for enum TransmissionType: %#v", x)
return
}
func (self *TransmissionType) SetString(x string) error {
s, err := TransmissionType_from_string(x); if err == nil { *self = s }; return err}
func (self *TransmissionType) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
func (self QuietLevel) String() string {
switch self {
default: return "0"
case Quiet_acknowledgements: return "1"
case Quiet_errors: return "2"
}}
func (self QuietLevel) MarshalJSON() ([]byte, error) { return json.Marshal(self.String()) }
func QuietLevel_from_string(x string) (ans QuietLevel, err error) {
switch x {
case "0": return Quiet_none, nil
case "1": return Quiet_acknowledgements, nil
case "2": return Quiet_errors, nil
}
err = fmt.Errorf("unknown value for enum QuietLevel: %#v", x)
return
}
func (self *QuietLevel) SetString(x string) error {
s, err := QuietLevel_from_string(x); if err == nil { *self = s }; return err}
func (self *QuietLevel) UnmarshalJSON(data []byte) (err error){
var x string
if err = json.Unmarshal(data, &x); err != nil {return err}
return self.SetString(x)}
