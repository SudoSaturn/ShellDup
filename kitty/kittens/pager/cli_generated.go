// Code generated by go_code.py; DO NOT EDIT.

package pager
import "fmt"
import "github.com/kovidgoyal/kitty/tools/cli"
var _ = fmt.Sprintf
func create_cmd(root *cli.Command, run_func func(*cli.Command, *Options, []string)(int, error)) {
ans := root.AddSubCommand(&cli.Command{
Name: "pager",
ShortDescription: "Pretty, side-by-side diffing of files and images",
Usage: "[options] [filename]",
HelpText: "Display text in a pager with various features such as searching, copy/paste, etc.\nText can some from the specified file or from STDIN. If no filename is specified\nand STDIN is not a TTY, it is used.\n",
Run: func(cmd *cli.Command, args []string) (int, error) {
opts := Options{}
err := cmd.GetOptionValues(&opts)
if err != nil { return 1, err }
return run_func(cmd, &opts, args)},
})
ans.Add(cli.OptionSpec{
            Name: "--role",
            Type: "choices",
            Dest: "Role",
            Help: "The role the pager is used for. The default is a standard less like pager.",
        
Choices: "pager, scrollback",

Completer: cli.NamesCompleter("Choices for role", "pager", "scrollback"),
	Default: "pager",
})
ans.Add(cli.OptionSpec{
            Name: "--follow",
            Type: "bool-set",
            Dest: "Follow",
            Help: "Follow changes in the specified file, automatically scrolling if currently on the last line.",
        })
ans.ArgCompleter = cli.MimepatCompleter("Text files", cli.CWD, "text/*")
}
type Options struct {
Role string
Follow bool
}
func (opts Options) AsCommandLine() (ans []string) {
	 sval := ""
	 _ = sval
	sval = opts.Role
	if (sval != "pager") { ans = append(ans, `--role=` + sval)}
	sval = fmt.Sprintf(`%#v`, opts.Follow)
	if (sval != `false`) { ans = append(ans, `--follow=` + sval)}
return
}
