// Code generated by go_code.py; DO NOT EDIT.

package diff
import "fmt"
import "github.com/kovidgoyal/kitty/tools/cli"
var _ = fmt.Sprintf
func create_cmd(root *cli.Command, run_func func(*cli.Command, *Options, []string)(int, error)) {
ans := root.AddSubCommand(&cli.Command{
Name: "diff",
ShortDescription: "Pretty, side-by-side diffing of files and images",
Usage: "[options] file_or_directory_left file_or_directory_right",
HelpText: "Show a side-by-side diff of the specified files/directories. You can also use :italic:`ssh:hostname:remote-file-path` to diff remote files.",
Run: func(cmd *cli.Command, args []string) (int, error) {
opts := Options{}
err := cmd.GetOptionValues(&opts)
if err != nil { return 1, err }
return run_func(cmd, &opts, args)},
})
ans.Add(cli.OptionSpec{
            Name: "--context",
            Type: "int",
            Dest: "Context",
            Help: "Number of lines of context to show between changes. Negative values use the number set in :file:`diff.conf`.",
        
	Default: "-1",
})
ans.Add(cli.OptionSpec{
            Name: "--config",
            Type: "list",
            Dest: "Config",
            Help: "Specify a path to the configuration file(s) to use. All configuration files are merged onto the builtin :file:`diff.conf`, overriding the builtin values. This option can be specified multiple times to read multiple configuration files in sequence, which are merged. Use the special value :code:`NONE` to not load any config file.\n\nIf this option is not specified, config files are searched for in the order: :file:`$XDG_CONFIG_HOME/kitty/diff.conf`, :file:`~/.config/kitty/diff.conf`, :file:`~/Library/Preferences/kitty/diff.conf`, :file:`$XDG_CONFIG_DIRS/kitty/diff.conf`. The first one that exists is used as the config file.\n\nIf the environment variable :envvar:`KITTY_CONFIG_DIRECTORY` is specified, that directory is always used and the above searching does not happen.\n\nIf :file:`/etc/xdg/kitty/diff.conf` exists, it is merged before (i.e. with lower priority) than any user config files. It can be used to specify system-wide defaults for all users. You can use either :code:`-` or :file:`/dev/stdin` to read the config from STDIN.",
        Completer: cli.ChainCompleters(cli.NamesCompleter("Keywords", "none", "NONE"), cli.FnmatchCompleter("Config files", cli.CWD, "*.conf")),})
ans.Add(cli.OptionSpec{
            Name: "--override -o",
            Type: "list",
            Dest: "Override",
            Help: "Override individual configuration options, can be specified multiple times. Syntax: :italic:`name=value`. For example: :italic:`-o background=gray`",
        })
ans.ArgCompleter = cli.MimepatCompleter("Text and image files", cli.CWD, "text/*", "image/*")
}
type Options struct {
Context int
Config []string
Override []string
}
func (opts Options) AsCommandLine() (ans []string) {
	 sval := ""
	 _ = sval
	sval = fmt.Sprintf(`%d`, opts.Context)
	if (sval != `-1`) { ans = append(ans, `--context=` + sval)}
		for _, x := range opts.Config { ans = append(ans, `--config=` + x) }
		for _, x := range opts.Override { ans = append(ans, `--override=` + x) }
return
}
