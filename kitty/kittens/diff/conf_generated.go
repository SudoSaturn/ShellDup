// Code generated by go_code.py; DO NOT EDIT.

package diff
import "fmt"
import "strconv"
import "github.com/kovidgoyal/kitty/tools/config"
import "github.com/kovidgoyal/kitty/tools/utils/style"
var _ = fmt.Println
var _ = config.StringToBool
var _ = strconv.Atoi
var _ = style.ParseColor
type Color_scheme_Choice_Type int
type Config struct {
Added_bg style.RGBA
Added_margin_bg style.RGBA
Background style.RGBA
Color_scheme Color_scheme_Choice_Type
Dark_added_bg style.RGBA
Dark_added_margin_bg style.RGBA
Dark_background style.RGBA
Dark_filler_bg style.RGBA
Dark_foreground style.RGBA
Dark_highlight_added_bg style.RGBA
Dark_highlight_removed_bg style.RGBA
Dark_hunk_bg style.RGBA
Dark_hunk_margin_bg style.RGBA
Dark_margin_bg style.RGBA
Dark_margin_fg style.RGBA
Dark_margin_filler_bg style.NullableColor
Dark_pygments_style string
Dark_removed_bg style.RGBA
Dark_removed_margin_bg style.RGBA
Dark_search_bg style.RGBA
Dark_search_fg style.RGBA
Dark_select_bg style.RGBA
Dark_select_fg style.NullableColor
Dark_title_bg style.RGBA
Dark_title_fg style.RGBA
Diff_cmd string
Filler_bg style.RGBA
Foreground style.RGBA
Highlight_added_bg style.RGBA
Highlight_removed_bg style.RGBA
Hunk_bg style.RGBA
Hunk_margin_bg style.RGBA
Ignore_name []string
Margin_bg style.RGBA
Margin_fg style.RGBA
Margin_filler_bg style.NullableColor
Num_context_lines uint64
Pygments_style string
Removed_bg style.RGBA
Removed_margin_bg style.RGBA
Replace_tab_by string
Search_bg style.RGBA
Search_fg style.RGBA
Select_bg style.RGBA
Select_fg style.NullableColor
Syntax_aliases map[string]string
Title_bg style.RGBA
Title_fg style.RGBA
KeyboardShortcuts []*config.KeyAction
}
func NewConfig() *Config {
return &Config{
Added_bg: style.RGBA{Red:230, Green: 255, Blue: 237},
Added_margin_bg: style.RGBA{Red:205, Green: 255, Blue: 216},
Background: style.RGBA{Red:255, Green: 255, Blue: 255},
Color_scheme: Color_scheme_auto,
Dark_added_bg: style.RGBA{Red:38, Green: 56, Blue: 52},
Dark_added_margin_bg: style.RGBA{Red:49, Green: 80, Blue: 61},
Dark_background: style.RGBA{Red:33, Green: 40, Blue: 48},
Dark_filler_bg: style.RGBA{Red:38, Green: 44, Blue: 54},
Dark_foreground: style.RGBA{Red:248, Green: 248, Blue: 242},
Dark_highlight_added_bg: style.RGBA{Red:49, Green: 80, Blue: 61},
Dark_highlight_removed_bg: style.RGBA{Red:92, Green: 53, Blue: 57},
Dark_hunk_bg: style.RGBA{Red:37, Green: 49, Blue: 66},
Dark_hunk_margin_bg: style.RGBA{Red:12, Green: 45, Blue: 107},
Dark_margin_bg: style.RGBA{Red:33, Green: 40, Blue: 48},
Dark_margin_fg: style.RGBA{Red:170, Green: 170, Blue: 170},
Dark_pygments_style: `github-dark`,
Dark_removed_bg: style.RGBA{Red:53, Green: 44, Blue: 51},
Dark_removed_margin_bg: style.RGBA{Red:92, Green: 53, Blue: 57},
Dark_search_bg: style.RGBA{Red:44, Green: 89, Blue: 156},
Dark_search_fg: style.RGBA{Red:255, Green: 255, Blue: 255},
Dark_select_bg: style.RGBA{Red:44, Green: 89, Blue: 156},
Dark_select_fg: style.NullableColor{IsSet: true, Color:style.RGBA{Red:255, Green: 255, Blue: 255}},
Dark_title_bg: style.RGBA{Red:33, Green: 40, Blue: 48},
Dark_title_fg: style.RGBA{Red:255, Green: 255, Blue: 255},
Diff_cmd: `auto`,
Filler_bg: style.RGBA{Red:250, Green: 251, Blue: 252},
Foreground: style.RGBA{Red:0, Green: 0, Blue: 0},
Highlight_added_bg: style.RGBA{Red:172, Green: 242, Blue: 189},
Highlight_removed_bg: style.RGBA{Red:253, Green: 184, Blue: 192},
Hunk_bg: style.RGBA{Red:241, Green: 248, Blue: 255},
Hunk_margin_bg: style.RGBA{Red:219, Green: 237, Blue: 255},
Margin_bg: style.RGBA{Red:250, Green: 251, Blue: 252},
Margin_fg: style.RGBA{Red:170, Green: 170, Blue: 170},
Num_context_lines: 3,
Pygments_style: `default`,
Removed_bg: style.RGBA{Red:255, Green: 238, Blue: 240},
Removed_margin_bg: style.RGBA{Red:255, Green: 220, Blue: 224},
Replace_tab_by: `    `,
Search_bg: style.RGBA{Red:68, Green: 68, Blue: 68},
Search_fg: style.RGBA{Red:255, Green: 255, Blue: 255},
Select_bg: style.RGBA{Red:180, Green: 213, Blue: 254},
Select_fg: style.NullableColor{IsSet: true, Color:style.RGBA{Red:0, Green: 0, Blue: 0}},
Syntax_aliases: map[string]string{"pyj": "py","pyi": "py","recipe": "py",},
Title_bg: style.RGBA{Red:255, Green: 255, Blue: 255},
Title_fg: style.RGBA{Red:0, Green: 0, Blue: 0},
KeyboardShortcuts: []*config.KeyAction{
{Name: "quit", Args: "", Normalized_keys: []string{
"q",
}},
{Name: "quit", Args: "", Normalized_keys: []string{
"esc",
}},
{Name: "scroll_by", Args: "1", Normalized_keys: []string{
"j",
}},
{Name: "scroll_by", Args: "1", Normalized_keys: []string{
"down",
}},
{Name: "scroll_by", Args: "-1", Normalized_keys: []string{
"k",
}},
{Name: "scroll_by", Args: "-1", Normalized_keys: []string{
"up",
}},
{Name: "scroll_to", Args: "start", Normalized_keys: []string{
"home",
}},
{Name: "scroll_to", Args: "end", Normalized_keys: []string{
"end",
}},
{Name: "scroll_to", Args: "next-page", Normalized_keys: []string{
"page_down",
}},
{Name: "scroll_to", Args: "next-page", Normalized_keys: []string{
"space",
}},
{Name: "scroll_to", Args: "next-page", Normalized_keys: []string{
"ctrl+f",
}},
{Name: "scroll_to", Args: "prev-page", Normalized_keys: []string{
"page_up",
}},
{Name: "scroll_to", Args: "prev-page", Normalized_keys: []string{
"ctrl+b",
}},
{Name: "scroll_to", Args: "next-half-page", Normalized_keys: []string{
"ctrl+d",
}},
{Name: "scroll_to", Args: "prev-half-page", Normalized_keys: []string{
"ctrl+u",
}},
{Name: "scroll_to", Args: "next-change", Normalized_keys: []string{
"n",
}},
{Name: "scroll_to", Args: "prev-change", Normalized_keys: []string{
"p",
}},
{Name: "scroll_to", Args: "next-file", Normalized_keys: []string{
"shift+j",
}},
{Name: "scroll_to", Args: "prev-file", Normalized_keys: []string{
"shift+k",
}},
{Name: "change_context", Args: "all", Normalized_keys: []string{
"a",
}},
{Name: "change_context", Args: "default", Normalized_keys: []string{
"=",
}},
{Name: "change_context", Args: "5", Normalized_keys: []string{
"plus",
}},
{Name: "change_context", Args: "-5", Normalized_keys: []string{
"-",
}},
{Name: "start_search", Args: "regex forward", Normalized_keys: []string{
"/",
}},
{Name: "start_search", Args: "regex backward", Normalized_keys: []string{
"?",
}},
{Name: "scroll_to", Args: "next-match", Normalized_keys: []string{
".",
}},
{Name: "scroll_to", Args: "next-match", Normalized_keys: []string{
">",
}},
{Name: "scroll_to", Args: "prev-match", Normalized_keys: []string{
",",
}},
{Name: "scroll_to", Args: "prev-match", Normalized_keys: []string{
"<",
}},
{Name: "start_search", Args: "substring forward", Normalized_keys: []string{
"f",
}},
{Name: "start_search", Args: "substring backward", Normalized_keys: []string{
"b",
}},
{Name: "copy_to_clipboard", Args: "", Normalized_keys: []string{
"y",
}},
{Name: "copy_to_clipboard_or_exit", Args: "", Normalized_keys: []string{
"ctrl+c",
}},
},
}}
const (
Color_scheme_auto Color_scheme_Choice_Type = iota
Color_scheme_light
Color_scheme_dark
)
func (x Color_scheme_Choice_Type) String() string {
switch x {
default: return ""
case Color_scheme_auto: return "auto"
case Color_scheme_light: return "light"
case Color_scheme_dark: return "dark"
}}
func Parse_Color_scheme(val string) (ans Color_scheme_Choice_Type, err error) {
switch val {
case "auto": return Color_scheme_auto, nil
case "light": return Color_scheme_light, nil
case "dark": return Color_scheme_dark, nil
default: return ans, fmt.Errorf("%#v is not a valid value for %s. Valid values are: %s", val, "dark", "auto, light, dark")
}}
func (c *Config) Parse(key, val string) (err error) {
switch key {
default: return fmt.Errorf("Unknown configuration key: %#v", key)
case "added_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse added_bg = %#v with error: %w", val, err) }
c.Added_bg = temp_val
case "added_margin_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse added_margin_bg = %#v with error: %w", val, err) }
c.Added_margin_bg = temp_val
case "background":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse background = %#v with error: %w", val, err) }
c.Background = temp_val
case "color_scheme":
var temp_val Color_scheme_Choice_Type
temp_val, err = Parse_Color_scheme(val)
if err != nil { return fmt.Errorf("Failed to parse color_scheme = %#v with error: %w", val, err) }
c.Color_scheme = temp_val
case "dark_added_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_added_bg = %#v with error: %w", val, err) }
c.Dark_added_bg = temp_val
case "dark_added_margin_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_added_margin_bg = %#v with error: %w", val, err) }
c.Dark_added_margin_bg = temp_val
case "dark_background":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_background = %#v with error: %w", val, err) }
c.Dark_background = temp_val
case "dark_filler_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_filler_bg = %#v with error: %w", val, err) }
c.Dark_filler_bg = temp_val
case "dark_foreground":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_foreground = %#v with error: %w", val, err) }
c.Dark_foreground = temp_val
case "dark_highlight_added_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_highlight_added_bg = %#v with error: %w", val, err) }
c.Dark_highlight_added_bg = temp_val
case "dark_highlight_removed_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_highlight_removed_bg = %#v with error: %w", val, err) }
c.Dark_highlight_removed_bg = temp_val
case "dark_hunk_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_hunk_bg = %#v with error: %w", val, err) }
c.Dark_hunk_bg = temp_val
case "dark_hunk_margin_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_hunk_margin_bg = %#v with error: %w", val, err) }
c.Dark_hunk_margin_bg = temp_val
case "dark_margin_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_margin_bg = %#v with error: %w", val, err) }
c.Dark_margin_bg = temp_val
case "dark_margin_fg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_margin_fg = %#v with error: %w", val, err) }
c.Dark_margin_fg = temp_val
case "dark_margin_filler_bg":
var temp_val style.NullableColor
temp_val, err = style.ParseColorOrNone(val)
if err != nil { return fmt.Errorf("Failed to parse dark_margin_filler_bg = %#v with error: %w", val, err) }
c.Dark_margin_filler_bg = temp_val
case "dark_pygments_style":
var temp_val string
temp_val, err = val, nil
if err != nil { return fmt.Errorf("Failed to parse dark_pygments_style = %#v with error: %w", val, err) }
c.Dark_pygments_style = temp_val
case "dark_removed_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_removed_bg = %#v with error: %w", val, err) }
c.Dark_removed_bg = temp_val
case "dark_removed_margin_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_removed_margin_bg = %#v with error: %w", val, err) }
c.Dark_removed_margin_bg = temp_val
case "dark_search_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_search_bg = %#v with error: %w", val, err) }
c.Dark_search_bg = temp_val
case "dark_search_fg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_search_fg = %#v with error: %w", val, err) }
c.Dark_search_fg = temp_val
case "dark_select_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_select_bg = %#v with error: %w", val, err) }
c.Dark_select_bg = temp_val
case "dark_select_fg":
var temp_val style.NullableColor
temp_val, err = style.ParseColorOrNone(val)
if err != nil { return fmt.Errorf("Failed to parse dark_select_fg = %#v with error: %w", val, err) }
c.Dark_select_fg = temp_val
case "dark_title_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_title_bg = %#v with error: %w", val, err) }
c.Dark_title_bg = temp_val
case "dark_title_fg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse dark_title_fg = %#v with error: %w", val, err) }
c.Dark_title_fg = temp_val
case "diff_cmd":
var temp_val string
temp_val, err = val, nil
if err != nil { return fmt.Errorf("Failed to parse diff_cmd = %#v with error: %w", val, err) }
c.Diff_cmd = temp_val
case "filler_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse filler_bg = %#v with error: %w", val, err) }
c.Filler_bg = temp_val
case "foreground":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse foreground = %#v with error: %w", val, err) }
c.Foreground = temp_val
case "highlight_added_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse highlight_added_bg = %#v with error: %w", val, err) }
c.Highlight_added_bg = temp_val
case "highlight_removed_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse highlight_removed_bg = %#v with error: %w", val, err) }
c.Highlight_removed_bg = temp_val
case "hunk_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse hunk_bg = %#v with error: %w", val, err) }
c.Hunk_bg = temp_val
case "hunk_margin_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse hunk_margin_bg = %#v with error: %w", val, err) }
c.Hunk_margin_bg = temp_val
case "ignore_name":
var temp_val []string
temp_val, err = []string{val}, nil
if err != nil { return fmt.Errorf("Failed to parse ignore_name = %#v with error: %w", val, err) }
c.Ignore_name = append(c.Ignore_name, temp_val...)
case "margin_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse margin_bg = %#v with error: %w", val, err) }
c.Margin_bg = temp_val
case "margin_fg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse margin_fg = %#v with error: %w", val, err) }
c.Margin_fg = temp_val
case "margin_filler_bg":
var temp_val style.NullableColor
temp_val, err = style.ParseColorOrNone(val)
if err != nil { return fmt.Errorf("Failed to parse margin_filler_bg = %#v with error: %w", val, err) }
c.Margin_filler_bg = temp_val
case "num_context_lines":
var temp_val uint64
temp_val, err = strconv.ParseUint(val, 10, 64)
if err != nil { return fmt.Errorf("Failed to parse num_context_lines = %#v with error: %w", val, err) }
c.Num_context_lines = temp_val
case "pygments_style":
var temp_val string
temp_val, err = val, nil
if err != nil { return fmt.Errorf("Failed to parse pygments_style = %#v with error: %w", val, err) }
c.Pygments_style = temp_val
case "removed_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse removed_bg = %#v with error: %w", val, err) }
c.Removed_bg = temp_val
case "removed_margin_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse removed_margin_bg = %#v with error: %w", val, err) }
c.Removed_margin_bg = temp_val
case "replace_tab_by":
var temp_val string
temp_val, err = config.StringLiteral(val)
if err != nil { return fmt.Errorf("Failed to parse replace_tab_by = %#v with error: %w", val, err) }
c.Replace_tab_by = temp_val
case "search_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse search_bg = %#v with error: %w", val, err) }
c.Search_bg = temp_val
case "search_fg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse search_fg = %#v with error: %w", val, err) }
c.Search_fg = temp_val
case "select_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse select_bg = %#v with error: %w", val, err) }
c.Select_bg = temp_val
case "select_fg":
var temp_val style.NullableColor
temp_val, err = style.ParseColorOrNone(val)
if err != nil { return fmt.Errorf("Failed to parse select_fg = %#v with error: %w", val, err) }
c.Select_fg = temp_val
case "syntax_aliases":
var temp_val map[string]string
temp_val, err = config.ParseStrDict(val, ` `, `:`)
if err != nil { return fmt.Errorf("Failed to parse syntax_aliases = %#v with error: %w", val, err) }
c.Syntax_aliases = temp_val
case "title_bg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse title_bg = %#v with error: %w", val, err) }
c.Title_bg = temp_val
case "title_fg":
var temp_val style.RGBA
temp_val, err = style.ParseColor(val)
if err != nil { return fmt.Errorf("Failed to parse title_fg = %#v with error: %w", val, err) }
c.Title_fg = temp_val
case "map":
tempsc, err := config.ParseMap(val)
if err != nil { return fmt.Errorf("Failed to parse map = %#v with error: %w", val, err) }
c.KeyboardShortcuts = append(c.KeyboardShortcuts, tempsc)
}
return}
