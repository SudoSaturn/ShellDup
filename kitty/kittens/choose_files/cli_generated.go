// Code generated by go_code.py; DO NOT EDIT.

package choose_files
import "fmt"
import "github.com/kovidgoyal/kitty/tools/cli"
var _ = fmt.Sprintf
func create_cmd(root *cli.Command, run_func func(*cli.Command, *Options, []string)(int, error)) {
ans := root.AddSubCommand(&cli.Command{
Name: "choose_files",
ShortDescription: "Choose files, fast",
Usage: "[options] [directory to start choosing files in]",
HelpText: "Select one or more files, quickly, using fuzzy finding, by typing just a few characters from\nthe file name. Browse matching files, using the arrow keys to navigate matches and press :kbd:`Enter`\nto select. The :kbd:`Tab` key can be used to change to a sub-folder. See the :doc:`online docs </kittens/choose-files>`\nfor full details.\n",
Run: func(cmd *cli.Command, args []string) (int, error) {
opts := Options{}
err := cmd.GetOptionValues(&opts)
if err != nil { return 1, err }
return run_func(cmd, &opts, args)},
Hidden: true,
})
ans.Add(cli.OptionSpec{
            Name: "--mode",
            Type: "choices",
            Dest: "Mode",
            Help: "The type of object(s) to select",
        
Choices: "file, dir, dirs, files, save-dir, save-file, save-files",

Completer: cli.NamesCompleter("Choices for mode", "file", "dir", "dirs", "files", "save-dir", "save-file", "save-files"),
	Default: "file",
})
ans.Add(cli.OptionSpec{
            Name: "--file-filter",
            Type: "list",
            Dest: "FileFilter",
            Help: "A list of filters to restrict the displayed files. Can be either mimetypes, or glob style patterns. Can be specified multiple times. The syntax is :code:`type:expression:Descriptive Name`. For example: :code:`mime:image/png:Images` and :code:`mime:image/gif:Images` and :code:`glob:*.[tT][xX][Tt]:Text files`. Note that glob patterns are case-sensitive. The mimetype specification is treated as a glob expressions as well, so you can, for example, use :code:`mime:text/*` to match all text files. The first filter in the list will be applied by default. Use a filter such as :code:`glob:*:All` to match all files. Note that filtering only appies to files, not directories.",
        })
ans.Add(cli.OptionSpec{
            Name: "--suggested-save-file-name",
            Type: "",
            Dest: "SuggestedSaveFileName",
            Help: "A suggested name when picking a save file.",
        })
ans.Add(cli.OptionSpec{
            Name: "--suggested-save-file-path",
            Type: "",
            Dest: "SuggestedSaveFilePath",
            Help: "Path to an existing file to use as the save file.",
        })
ans.Add(cli.OptionSpec{
            Name: "--title",
            Type: "",
            Dest: "Title",
            Help: "Window title to use for this chooser",
        })
ans.Add(cli.OptionSpec{
            Name: "--display-title",
            Type: "bool-set",
            Dest: "DisplayTitle",
            Help: "Show the window title at the top, useful when this kitten is used in an OS window without a title bar.",
        })
ans.Add(cli.OptionSpec{
            Name: "--override -o",
            Type: "list",
            Dest: "Override",
            Help: "Override individual configuration options, can be specified multiple times. Syntax: :italic:`name=value`.",
        })
ans.Add(cli.OptionSpec{
            Name: "--config",
            Type: "list",
            Dest: "Config",
            Help: "Specify a path to the configuration file(s) to use. All configuration files are merged onto the builtin :file:`choose-files.conf`, overriding the builtin values. This option can be specified multiple times to read multiple configuration files in sequence, which are merged. Use the special value :code:`NONE` to not load any config file.\n\nIf this option is not specified, config files are searched for in the order: :file:`$XDG_CONFIG_HOME/kitty/choose-files.conf`, :file:`~/.config/kitty/choose-files.conf`, :file:`~/Library/Preferences/kitty/choose-files.conf`, :file:`$XDG_CONFIG_DIRS/kitty/choose-files.conf`. The first one that exists is used as the config file.\n\nIf the environment variable :envvar:`KITTY_CONFIG_DIRECTORY` is specified, that directory is always used and the above searching does not happen.\n\nIf :file:`/etc/xdg/kitty/choose-files.conf` exists, it is merged before (i.e. with lower priority) than any user config files. It can be used to specify system-wide defaults for all users. You can use either :code:`-` or :file:`/dev/stdin` to read the config from STDIN.",
        Completer: cli.ChainCompleters(cli.NamesCompleter("Keywords", "none", "NONE"), cli.FnmatchCompleter("Config files", cli.CWD, "*.conf")),})
ans.Add(cli.OptionSpec{
            Name: "--write-output-to",
            Type: "",
            Dest: "WriteOutputTo",
            Help: "Path to a file to which the output is written in addition to STDOUT.",
        })
ans.Add(cli.OptionSpec{
            Name: "--output-format",
            Type: "choices",
            Dest: "OutputFormat",
            Help: "The format in which to write the output.",
        
Choices: "text, json",

Completer: cli.NamesCompleter("Choices for output-format", "text", "json"),
	Default: "text",
})
ans.Add(cli.OptionSpec{
            Name: "--write-pid-to",
            Type: "",
            Dest: "WritePidTo",
            Help: "Path to a file to which to write the process ID (PID) of this process to.",
        })
ans.ArgCompleter = cli.DirectoryCompleter("Directories", cli.CWD)
clone := root.AddClone(ans.Group, ans)
clone.Hidden = false
clone.Name = "choose-files"
}
type Options struct {
Mode string
FileFilter []string
SuggestedSaveFileName string
SuggestedSaveFilePath string
Title string
DisplayTitle bool
Override []string
Config []string
WriteOutputTo string
OutputFormat string
WritePidTo string
}
func (opts Options) AsCommandLine() (ans []string) {
	 sval := ""
	 _ = sval
	sval = opts.Mode
	if (sval != "file") { ans = append(ans, `--mode=` + sval)}
		for _, x := range opts.FileFilter { ans = append(ans, `--file-filter=` + x) }
	sval = opts.SuggestedSaveFileName
	if (sval != "") { ans = append(ans, `--suggested-save-file-name=` + sval)}
	sval = opts.SuggestedSaveFilePath
	if (sval != "") { ans = append(ans, `--suggested-save-file-path=` + sval)}
	sval = opts.Title
	if (sval != "") { ans = append(ans, `--title=` + sval)}
	sval = fmt.Sprintf(`%#v`, opts.DisplayTitle)
	if (sval != `false`) { ans = append(ans, `--display-title=` + sval)}
		for _, x := range opts.Override { ans = append(ans, `--override=` + x) }
		for _, x := range opts.Config { ans = append(ans, `--config=` + x) }
	sval = opts.WriteOutputTo
	if (sval != "") { ans = append(ans, `--write-output-to=` + sval)}
	sval = opts.OutputFormat
	if (sval != "text") { ans = append(ans, `--output-format=` + sval)}
	sval = opts.WritePidTo
	if (sval != "") { ans = append(ans, `--write-pid-to=` + sval)}
return
}
