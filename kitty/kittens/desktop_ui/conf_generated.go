// Code generated by go_code.py; DO NOT EDIT.

package desktop_ui
import "fmt"
import "strconv"
import "github.com/kovidgoyal/kitty/tools/config"
import "github.com/kovidgoyal/kitty/tools/utils/style"
var _ = fmt.Println
var _ = config.StringToBool
var _ = strconv.Atoi
var _ = style.ParseColor
type Color_scheme_Choice_Type int
type Contrast_Choice_Type int
type Config struct {
Accent_color string
Color_scheme Color_scheme_Choice_Type
Contrast Contrast_Choice_Type
File_chooser_kitty_conf []string
File_chooser_kitty_override []string
File_chooser_size string
}
func NewConfig() *Config {
return &Config{
Accent_color: `cyan`,
Color_scheme: Color_scheme_no_preference,
Contrast: Contrast_normal,
}}
const (
Color_scheme_no_preference Color_scheme_Choice_Type = iota
Color_scheme_dark
Color_scheme_light
)
func (x Color_scheme_Choice_Type) String() string {
switch x {
default: return ""
case Color_scheme_no_preference: return "no-preference"
case Color_scheme_dark: return "dark"
case Color_scheme_light: return "light"
}}
func Parse_Color_scheme(val string) (ans Color_scheme_Choice_Type, err error) {
switch val {
case "no-preference": return Color_scheme_no_preference, nil
case "dark": return Color_scheme_dark, nil
case "light": return Color_scheme_light, nil
default: return ans, fmt.Errorf("%#v is not a valid value for %s. Valid values are: %s", val, "light", "no-preference, dark, light")
}}
const (
Contrast_normal Contrast_Choice_Type = iota
Contrast_high
)
func (x Contrast_Choice_Type) String() string {
switch x {
default: return ""
case Contrast_normal: return "normal"
case Contrast_high: return "high"
}}
func Parse_Contrast(val string) (ans Contrast_Choice_Type, err error) {
switch val {
case "normal": return Contrast_normal, nil
case "high": return Contrast_high, nil
default: return ans, fmt.Errorf("%#v is not a valid value for %s. Valid values are: %s", val, "high", "normal, high")
}}
func (c *Config) Parse(key, val string) (err error) {
switch key {
default: return fmt.Errorf("Unknown configuration key: %#v", key)
case "accent_color":
var temp_val string
temp_val, err = val, nil
if err != nil { return fmt.Errorf("Failed to parse accent_color = %#v with error: %w", val, err) }
c.Accent_color = temp_val
case "color_scheme":
var temp_val Color_scheme_Choice_Type
temp_val, err = Parse_Color_scheme(val)
if err != nil { return fmt.Errorf("Failed to parse color_scheme = %#v with error: %w", val, err) }
c.Color_scheme = temp_val
case "contrast":
var temp_val Contrast_Choice_Type
temp_val, err = Parse_Contrast(val)
if err != nil { return fmt.Errorf("Failed to parse contrast = %#v with error: %w", val, err) }
c.Contrast = temp_val
case "file_chooser_kitty_conf":
var temp_val []string
temp_val, err = []string{val}, nil
if err != nil { return fmt.Errorf("Failed to parse file_chooser_kitty_conf = %#v with error: %w", val, err) }
c.File_chooser_kitty_conf = append(c.File_chooser_kitty_conf, temp_val...)
case "file_chooser_kitty_override":
var temp_val []string
temp_val, err = []string{val}, nil
if err != nil { return fmt.Errorf("Failed to parse file_chooser_kitty_override = %#v with error: %w", val, err) }
c.File_chooser_kitty_override = append(c.File_chooser_kitty_override, temp_val...)
case "file_chooser_size":
var temp_val string
temp_val, err = val, nil
if err != nil { return fmt.Errorf("Failed to parse file_chooser_size = %#v with error: %w", val, err) }
c.File_chooser_size = temp_val
}
return}
