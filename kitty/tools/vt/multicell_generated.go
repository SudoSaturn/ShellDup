// Code generated by go_code.py; DO NOT EDIT.

package vt

// Total number of bits used: 30
type MultiCell uint32

func (s MultiCell) Vertical_align() uint8 {
    return uint8(s & 0b111)
}

func (s *MultiCell) Set_vertical_align(val uint8) {
    *s &^= 0b111
    *s |= MultiCell(val & 0b111)
}

func (s MultiCell) Y() uint8 {
    return uint8((s >> 3) & 0b1111)
}

func (s *MultiCell) Set_y(val uint8) {
    *s &^= 0b1111 << 3
    *s |= MultiCell(val&0b1111) << 3
}

func (s MultiCell) X() uint8 {
    return uint8((s >> 7) & 0b1111111)
}

func (s *MultiCell) Set_x(val uint8) {
    *s &^= 0b1111111 << 7
    *s |= MultiCell(val&0b1111111) << 7
}

func (s MultiCell) Width() uint8 {
    return uint8((s >> 14) & 0b111)
}

func (s *MultiCell) Set_width(val uint8) {
    *s &^= 0b111 << 14
    *s |= MultiCell(val&0b111) << 14
}

func (s MultiCell) Subscale_d() uint8 {
    return uint8((s >> 17) & 0b1111)
}

func (s *MultiCell) Set_subscale_d(val uint8) {
    *s &^= 0b1111 << 17
    *s |= MultiCell(val&0b1111) << 17
}

func (s MultiCell) Subscale_n() uint8 {
    return uint8((s >> 21) & 0b1111)
}

func (s *MultiCell) Set_subscale_n(val uint8) {
    *s &^= 0b1111 << 21
    *s |= MultiCell(val&0b1111) << 21
}

func (s MultiCell) Scale() uint8 {
    return uint8((s >> 25) & 0b111)
}

func (s *MultiCell) Set_scale(val uint8) {
    *s &^= 0b111 << 25
    *s |= MultiCell(val&0b111) << 25
}

func (s MultiCell) Natural_width() uint8 {
    return uint8((s >> 28) & 0b1)
}

func (s *MultiCell) Set_natural_width(val uint8) {
    *s &^= 0b1 << 28
    *s |= MultiCell(val&0b1) << 28
}

func (s MultiCell) Is_multicell() uint8 {
    return uint8((s >> 29) & 0b1)
}

func (s *MultiCell) Set_is_multicell(val uint8) {
    *s &^= 0b1 << 29
    *s |= MultiCell(val&0b1) << 29
}

