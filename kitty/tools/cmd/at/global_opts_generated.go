// Code generated by go_code.py; DO NOT EDIT.


package at
import "github.com/kovidgoyal/kitty/tools/cli"
type rc_global_options struct {
To string
Password string
PasswordFile string
PasswordEnv string
UsePassword string
}
var rc_global_opts rc_global_options

func add_rc_global_opts(cmd *cli.Command) {
cmd.AddToGroup("Global options", cli.OptionSpec{
            Name: "--to",
            Type: "",
            Dest: "To",
            Help: "An address for the kitty instance to control. Corresponds to the address given to the kitty instance via the :option:`kitty --listen-on` option or the :opt:`listen_on` setting in :file:`kitty.conf`. If not specified, the environment variable :envvar:`KITTY_LISTEN_ON` is checked. If that is also not found, messages are sent to the controlling terminal for this process, i.e. they will only work if this process is run within a kitty window.",
        
	Depth: 1,
})
cmd.AddToGroup("Global options", cli.OptionSpec{
            Name: "--password",
            Type: "",
            Dest: "Password",
            Help: "A password to use when contacting kitty. This will cause kitty to ask the user for permission to perform the specified action, unless the password has been accepted before or is pre-configured in :file:`kitty.conf`. To use a blank password specify :option:`kitten @ --use-password` as :code:`always`.",
        
	Depth: 1,
})
cmd.AddToGroup("Global options", cli.OptionSpec{
            Name: "--password-file",
            Type: "",
            Dest: "PasswordFile",
            Help: "A file from which to read the password. Trailing whitespace is ignored. Relative paths are resolved from the kitty configuration directory. Use - to read from STDIN. Use :code:`fd:num` to read from the file descriptor :code:`num`. Used if no :option:`kitten @ --password` is supplied. Defaults to checking for the :file:`rc-pass` file in the kitty configuration directory.",
        Completer: cli.ChainCompleters(cli.NamesCompleter("Keywords", "-"), cli.FnmatchCompleter("Files", cli.CONFIG, "*")),
	Depth: 1,

	Default: "rc-pass",
})
cmd.AddToGroup("Global options", cli.OptionSpec{
            Name: "--password-env",
            Type: "",
            Dest: "PasswordEnv",
            Help: "The name of an environment variable to read the password from. Used if no :option:`kitten @ --password-file` is supplied. Defaults to checking the environment variable :envvar:`KITTY_RC_PASSWORD`.",
        
	Depth: 1,

	Default: "KITTY_RC_PASSWORD",
})
cmd.AddToGroup("Global options", cli.OptionSpec{
            Name: "--use-password",
            Type: "choices",
            Dest: "UsePassword",
            Help: "If no password is available, kitty will usually just send the remote control command without a password. This option can be used to force it to :code:`always` or :code:`never` use the supplied password. If set to always and no password is provided, the blank password is used.",
        
Choices: "if-available, always, never",

Completer: cli.NamesCompleter("Choices for use-password", "if-available", "always", "never"),
	Depth: 1,

	Default: "if-available",
})
}
