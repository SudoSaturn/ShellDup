// Code generated by go_code.py; DO NOT EDIT.




// License: GPLv3 Copyright: 2022, Kovid Goyal, <kovid at kovidgoyal.net>

// Code generated by gen-go-code.py; DO NOT EDIT.

package at

import (
	"fmt"
	"strings"
	"time"

	"github.com/kovidgoyal/kitty/tools/cli"
	"github.com/kovidgoyal/kitty/tools/utils"
)

var _ = fmt.Print
var _ = strings.Join

type options_load_config_type struct {
	IgnoreOverrides bool
Override []string
}

var options_load_config options_load_config_type

type load_config_json_type struct {
	Paths []escaped_string`json:"paths,omitempty"`
Override []escaped_string`json:"override,omitempty"`
Ignore_overrides bool`json:"ignore_overrides,omitempty"`
}

func create_payload_load_config(io_data *rc_io_data, cmd *cli.Command, args []string) (err error) {
	payload := load_config_json_type{}
	payload.Paths = escape_list_of_strings(args)
payload.Override = escape_list_of_strings(options_load_config.Override)
payload.Ignore_overrides = options_load_config.IgnoreOverrides
	io_data.rc.Payload = payload
	return
}

func create_rc_load_config(args []string) (*utils.RemoteControlCmd, error) {
	rc := utils.RemoteControlCmd{
		Cmd:        "load-config",
		Version:    ProtocolVersion,
		NoResponse: false,
		Stream:     false,
	}
	if rc.Stream {
		stream_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.StreamId = stream_id
	}
	if false {
		async_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.Async = async_id
	}
	return &rc, nil
}

func run_load_config(cmd *cli.Command, args []string) (return_code int, err error) {
	err = cmd.GetOptionValues(&options_load_config)
	if err != nil {
		return
	}

	rc, err := create_rc_load_config(args)
	if err != nil {
		return
	}
	nrv, err := cli.GetOptionValue[bool](cmd, "NoResponse")
	if err == nil {
		rc.NoResponse = nrv
	}
	var timeout float64 = 10.0
	rt, err := cli.GetOptionValue[float64](cmd, "ResponseTimeout")
	if err == nil {
		timeout = rt
	}
	io_data := rc_io_data{
		cmd:                    cmd,
		rc:                     rc,
		timeout:                time.Duration(timeout * float64(time.Second)),
		string_response_is_err: false,
	}
	err = create_payload_load_config(&io_data, cmd, args)
	if err != nil {
		return
	}

	err = send_rc_command(&io_data)
	if ee, ok := err.(*exit_error); ok && !running_shell {
		return ee.exit_code, nil
	}
	return
}

func setup_load_config(parent *cli.Command) *cli.Command {
	ans := parent.AddSubCommand(&cli.Command{
		Name:             "load-config",
		Usage:            " CONF_FILE ...",
		ShortDescription: "(Re)load a config file",
		HelpText:         "(Re)load the specified kitty.conf config files(s). If no files are specified the previously specified config file is reloaded. Note that the specified paths must exist and be readable by the kitty process on the computer that process is running on. Relative paths are resolved with respect to the kitty config directory on the computer running kitty.",
		Run:              run_load_config,
	})
	ans.ArgCompleter = cli.FnmatchCompleter("CONF files,", cli.CWD, "*.conf")
ans.Add(cli.OptionSpec{
            Name: "--ignore-overrides",
            Type: "bool-set",
            Dest: "IgnoreOverrides",
            Help: "By default, any config overrides previously specified at the kitty invocation command line or a previous load-config-file command are respected. Use this option to have them ignored instead.",
        })
ans.Add(cli.OptionSpec{
            Name: "--override -o",
            Type: "list",
            Dest: "Override",
            Help: "Override individual configuration options, can be specified multiple times. Syntax: :italic:`name=value`. For example: :option:`kitty -o` font_size=20",
        Completer: complete_kitty_override,})
ans.Add(cli.OptionSpec{
            Name: "--no-response",
            Type: "bool-set",
            Dest: "NoResponse",
            Help: "Don't wait for a response indicating the success of the action. Note that using this option means that you will not be notified of failures.",
        
	Default: "false",
})
	return ans
}

func init() {
	register_at_cmd(setup_load_config)
}
