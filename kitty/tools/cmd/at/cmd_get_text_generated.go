// Code generated by go_code.py; DO NOT EDIT.




// License: GPLv3 Copyright: 2022, Kovid Goyal, <kovid at kovidgoyal.net>

// Code generated by gen-go-code.py; DO NOT EDIT.

package at

import (
	"fmt"
	"strings"
	"time"

	"github.com/kovidgoyal/kitty/tools/cli"
	"github.com/kovidgoyal/kitty/tools/utils"
)

var _ = fmt.Print
var _ = strings.Join

type options_get_text_type struct {
	Match string
Extent string
Ansi bool
AddCursor bool
AddWrapMarkers bool
ClearSelection bool
Self bool
}

var options_get_text options_get_text_type

type get_text_json_type struct {
	Match escaped_string`json:"match,omitempty"`
Extent string`json:"extent,omitempty"`
Ansi bool`json:"ansi,omitempty"`
Cursor bool`json:"cursor,omitempty"`
Wrap_markers bool`json:"wrap_markers,omitempty"`
Clear_selection bool`json:"clear_selection,omitempty"`
Self bool`json:"self,omitempty"`
}

func create_payload_get_text(io_data *rc_io_data, cmd *cli.Command, args []string) (err error) {
	payload := get_text_json_type{}
	if len(args) != 0 { return fmt.Errorf("%s", "Unknown extra argument(s) supplied to get_text") }
payload.Match = escaped_string(options_get_text.Match)
payload.Extent = options_get_text.Extent
payload.Ansi = options_get_text.Ansi
payload.Cursor = options_get_text.AddCursor
payload.Wrap_markers = options_get_text.AddWrapMarkers
payload.Clear_selection = options_get_text.ClearSelection
payload.Self = options_get_text.Self
	io_data.rc.Payload = payload
	return
}

func create_rc_get_text(args []string) (*utils.RemoteControlCmd, error) {
	rc := utils.RemoteControlCmd{
		Cmd:        "get-text",
		Version:    ProtocolVersion,
		NoResponse: false,
		Stream:     false,
	}
	if rc.Stream {
		stream_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.StreamId = stream_id
	}
	if false {
		async_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.Async = async_id
	}
	return &rc, nil
}

func run_get_text(cmd *cli.Command, args []string) (return_code int, err error) {
	err = cmd.GetOptionValues(&options_get_text)
	if err != nil {
		return
	}

	rc, err := create_rc_get_text(args)
	if err != nil {
		return
	}
	nrv, err := cli.GetOptionValue[bool](cmd, "NoResponse")
	if err == nil {
		rc.NoResponse = nrv
	}
	var timeout float64 = 10.0
	rt, err := cli.GetOptionValue[float64](cmd, "ResponseTimeout")
	if err == nil {
		timeout = rt
	}
	io_data := rc_io_data{
		cmd:                    cmd,
		rc:                     rc,
		timeout:                time.Duration(timeout * float64(time.Second)),
		string_response_is_err: false,
	}
	err = create_payload_get_text(&io_data, cmd, args)
	if err != nil {
		return
	}

	err = send_rc_command(&io_data)
	if ee, ok := err.(*exit_error); ok && !running_shell {
		return ee.exit_code, nil
	}
	return
}

func setup_get_text(parent *cli.Command) *cli.Command {
	ans := parent.AddSubCommand(&cli.Command{
		Name:             "get-text",
		Usage:            "",
		ShortDescription: "Get text from the specified window",
		HelpText:         "Get text from the specified window",
		Run:              run_get_text,
	})
	ans.StopCompletingAtArg = 0
ans.Add(cli.OptionSpec{
            Name: "--match -m",
            Type: "",
            Dest: "Match",
            Help: "The window to match. Match specifications are of the form: :italic:`field:query`. Where :italic:`field` can be one of: :code:`id`, :code:`title`, :code:`pid`, :code:`cwd`, :code:`cmdline`, :code:`num`, :code:`env`, :code:`var`, :code:`state`, :code:`neighbor`, :code:`session` and :code:`recent`. :italic:`query` is the expression to match. Expressions can be either a number or a regular expression, and can be :ref:`combined using Boolean operators <search_syntax>`.\n\nThe special value :code:`all` matches all windows.\n\nFor numeric fields: :code:`id`, :code:`pid`, :code:`num` and :code:`recent`, the expression is interpreted as a number, not a regular expression. Negative values for :code:`id` match from the highest id number down, in particular, -1 is the most recently created window.\n\nThe field :code:`num` refers to the window position in the current tab, starting from zero and counting clockwise (this is the same as the order in which the windows are reported by the :ref:`kitten @ ls <at-ls>` command).\n\nThe window id of the current window is available as the :envvar:`KITTY_WINDOW_ID` environment variable.\n\nThe field :code:`recent` refers to recently active windows in the currently active tab, with zero being the currently active window, one being the previously active window and so on.\n\nThe field :code:`neighbor` refers to a neighbor of the active window in the specified direction, which can be: :code:`left`, :code:`right`, :code:`top` or :code:`bottom`.\n\nThe field :code:`session` matches windows that were created in the specified session. Use the expression :code:`^$` to match windows that were not created in a session and :code:`.` to match the currently active session and :code:`~` to match either the currently active sesison or the last active session when no session is active.\n\nWhen using the :code:`env` field to match on environment variables, you can specify only the environment variable name or a name and value, for example, :code:`env:MY_ENV_VAR=2`.\n\nSimilarly, the :code:`var` field matches on user variables set on the window. You can specify name or name and value as with the :code:`env` field.\n\nThe field :code:`state` matches on the state of the window. Supported states are: :code:`active`, :code:`focused`, :code:`needs_attention`, :code:`parent_active`, :code:`parent_focused`, :code:`self`, :code:`overlay_parent`.  Active windows are the windows that are active in their parent tab. There is only one focused window and it is the window to which keyboard events are delivered. If no window is focused, the last focused window is matched. The value :code:`self` matches the window in which the remote control command is run. The value :code:`overlay_parent` matches the window that is under the :code:`self` window, when the self window is an overlay.\n\nNote that you can use the :ref:`kitten @ ls <at-ls>` command to get a list of windows.",
        })
ans.Add(cli.OptionSpec{
            Name: "--extent",
            Type: "choices",
            Dest: "Extent",
            Help: "What text to get. The default of :code:`screen` means all text currently on the screen. :code:`all` means all the screen+scrollback and :code:`selection` means the currently selected text. :code:`first_cmd_output_on_screen` means the output of the first command that was run in the window on screen. :code:`last_cmd_output` means the output of the last command that was run in the window. :code:`last_visited_cmd_output` means the first command output below the last scrolled position via scroll_to_prompt. :code:`last_non_empty_output` is the output from the last command run in the window that had some non empty output. The last four require :ref:`shell_integration` to be enabled.",
        
Choices: "screen, all, first_cmd_output_on_screen, last_cmd_output, last_non_empty_output, last_visited_cmd_output, selection",

Completer: cli.NamesCompleter("Choices for extent", "screen", "all", "first_cmd_output_on_screen", "last_cmd_output", "last_non_empty_output", "last_visited_cmd_output", "selection"),
	Default: "screen",
})
ans.Add(cli.OptionSpec{
            Name: "--ansi",
            Type: "bool-set",
            Dest: "Ansi",
            Help: "By default, only plain text is returned. With this flag, the text will include the ANSI formatting escape codes for colors, bold, italic, etc.",
        })
ans.Add(cli.OptionSpec{
            Name: "--add-cursor",
            Type: "bool-set",
            Dest: "AddCursor",
            Help: "Add ANSI escape codes specifying the cursor position and style to the end of the text.",
        })
ans.Add(cli.OptionSpec{
            Name: "--add-wrap-markers",
            Type: "bool-set",
            Dest: "AddWrapMarkers",
            Help: "Add carriage returns at every line wrap location (where long lines are wrapped at screen edges).",
        })
ans.Add(cli.OptionSpec{
            Name: "--clear-selection",
            Type: "bool-set",
            Dest: "ClearSelection",
            Help: "Clear the selection in the matched window, if any.",
        })
ans.Add(cli.OptionSpec{
            Name: "--self",
            Type: "bool-set",
            Dest: "Self",
            Help: "Get text from the window this command is run in, rather than the active window.",
        })
	return ans
}

func init() {
	register_at_cmd(setup_get_text)
}
