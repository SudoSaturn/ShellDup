// Code generated by go_code.py; DO NOT EDIT.




// License: GPLv3 Copyright: 2022, Kovid Goyal, <kovid at kovidgoyal.net>

// Code generated by gen-go-code.py; DO NOT EDIT.

package at

import (
	"fmt"
	"strings"
	"time"

	"github.com/kovidgoyal/kitty/tools/cli"
	"github.com/kovidgoyal/kitty/tools/utils"
)

var _ = fmt.Print
var _ = strings.Join

type options_set_font_size_type struct {
	All bool
}

var options_set_font_size options_set_font_size_type

type set_font_size_json_type struct {
	Size float64`json:"size,omitempty"`
All bool`json:"all,omitempty"`
Increment_op string`json:"increment_op,omitempty"`
}

func create_payload_set_font_size(io_data *rc_io_data, cmd *cli.Command, args []string) (err error) {
	payload := set_font_size_json_type{}
	if len(args) != 1 { return fmt.Errorf("%s", "Must specify exactly 1 argument(s) for set_font_size") }
err = parse_set_font_size(args[0], &payload)
if err != nil { return err }
payload.All = options_set_font_size.All
	io_data.rc.Payload = payload
	return
}

func create_rc_set_font_size(args []string) (*utils.RemoteControlCmd, error) {
	rc := utils.RemoteControlCmd{
		Cmd:        "set-font-size",
		Version:    ProtocolVersion,
		NoResponse: false,
		Stream:     false,
	}
	if rc.Stream {
		stream_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.StreamId = stream_id
	}
	if false {
		async_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.Async = async_id
	}
	return &rc, nil
}

func run_set_font_size(cmd *cli.Command, args []string) (return_code int, err error) {
	err = cmd.GetOptionValues(&options_set_font_size)
	if err != nil {
		return
	}

	rc, err := create_rc_set_font_size(args)
	if err != nil {
		return
	}
	nrv, err := cli.GetOptionValue[bool](cmd, "NoResponse")
	if err == nil {
		rc.NoResponse = nrv
	}
	var timeout float64 = 10.0
	rt, err := cli.GetOptionValue[float64](cmd, "ResponseTimeout")
	if err == nil {
		timeout = rt
	}
	io_data := rc_io_data{
		cmd:                    cmd,
		rc:                     rc,
		timeout:                time.Duration(timeout * float64(time.Second)),
		string_response_is_err: false,
	}
	err = create_payload_set_font_size(&io_data, cmd, args)
	if err != nil {
		return
	}

	err = send_rc_command(&io_data)
	if ee, ok := err.(*exit_error); ok && !running_shell {
		return ee.exit_code, nil
	}
	return
}

func setup_set_font_size(parent *cli.Command) *cli.Command {
	ans := parent.AddSubCommand(&cli.Command{
		Name:             "set-font-size",
		Usage:            " FONT_SIZE",
		ShortDescription: "Set the font size in the active top-level OS window",
		HelpText:         "Sets the font size to the specified size, in pts. Note that in kitty all sub-windows in the same OS window must have the same font size. A value of zero resets the font size to default. Prefixing the value with a :code:`+`, :code:`-`, :code:`*` or :code:`/` changes the font size by the specified amount. Use -- before using - to have it not mistaken for a option. For example: kitten @ set-font-size -- -2",
		Run:              run_set_font_size,
	})
	ans.StopCompletingAtArg = 1
ans.Add(cli.OptionSpec{
            Name: "--all -a",
            Type: "bool-set",
            Dest: "All",
            Help: "By default, the font size is only changed in the active OS window, this option will cause it to be changed in all OS windows. It also changes the font size for any newly created OS Windows in the future.",
        })
	return ans
}

func init() {
	register_at_cmd(setup_set_font_size)
}
