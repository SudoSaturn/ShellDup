// Code generated by go_code.py; DO NOT EDIT.




// License: GPLv3 Copyright: 2022, Kovid Goyal, <kovid at kovidgoyal.net>

// Code generated by gen-go-code.py; DO NOT EDIT.

package at

import (
	"fmt"
	"strings"
	"time"

	"github.com/kovidgoyal/kitty/tools/cli"
	"github.com/kovidgoyal/kitty/tools/utils"
)

var _ = fmt.Print
var _ = strings.Join

type options_set_window_logo_type struct {
	Match string
Self bool
Position string
Alpha float64
}

var options_set_window_logo options_set_window_logo_type

type set_window_logo_json_type struct {
	Data escaped_string`json:"data,omitempty"`
Position escaped_string`json:"position,omitempty"`
Alpha float64`json:"alpha"`
Match escaped_string`json:"match,omitempty"`
Self bool`json:"self,omitempty"`
}

func create_payload_set_window_logo(io_data *rc_io_data, cmd *cli.Command, args []string) (err error) {
	payload := set_window_logo_json_type{}
	if len(args) != 1 { return fmt.Errorf("%s", "Must specify exactly 1 argument(s) for set_window_logo") }
io_data.multiple_payload_generator, err = read_window_logo(io_data, args[0])
if err != nil { return err }
payload.Position = escaped_string(options_set_window_logo.Position)
payload.Alpha = options_set_window_logo.Alpha
payload.Match = escaped_string(options_set_window_logo.Match)
payload.Self = options_set_window_logo.Self
	io_data.rc.Payload = payload
	return
}

func create_rc_set_window_logo(args []string) (*utils.RemoteControlCmd, error) {
	rc := utils.RemoteControlCmd{
		Cmd:        "set-window-logo",
		Version:    ProtocolVersion,
		NoResponse: false,
		Stream:     true,
	}
	if rc.Stream {
		stream_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.StreamId = stream_id
	}
	if false {
		async_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.Async = async_id
	}
	return &rc, nil
}

func run_set_window_logo(cmd *cli.Command, args []string) (return_code int, err error) {
	err = cmd.GetOptionValues(&options_set_window_logo)
	if err != nil {
		return
	}

	rc, err := create_rc_set_window_logo(args)
	if err != nil {
		return
	}
	nrv, err := cli.GetOptionValue[bool](cmd, "NoResponse")
	if err == nil {
		rc.NoResponse = nrv
	}
	var timeout float64 = 10.0
	rt, err := cli.GetOptionValue[float64](cmd, "ResponseTimeout")
	if err == nil {
		timeout = rt
	}
	io_data := rc_io_data{
		cmd:                    cmd,
		rc:                     rc,
		timeout:                time.Duration(timeout * float64(time.Second)),
		string_response_is_err: false,
	}
	err = create_payload_set_window_logo(&io_data, cmd, args)
	if err != nil {
		return
	}

	err = send_rc_command(&io_data)
	if ee, ok := err.(*exit_error); ok && !running_shell {
		return ee.exit_code, nil
	}
	return
}

func setup_set_window_logo(parent *cli.Command) *cli.Command {
	ans := parent.AddSubCommand(&cli.Command{
		Name:             "set-window-logo",
		Usage:            " PATH_TO_PNG_IMAGE",
		ShortDescription: "Set the window logo",
		HelpText:         "Set the logo image for the specified windows. You must specify the path to an image that will be used as the logo. If you specify the special value :code:`none` then any existing logo will be removed. Supported image formats are: PNG, JPEG, WEBP, GIF, BMP, TIFF",
		Run:              run_set_window_logo,
	})
	ans.StopCompletingAtArg = 1
ans.ArgCompleter = cli.FnmatchCompleter("Images", cli.CWD, "*.png", "*.jpg", "*.jpeg", "*.webp", "*.gif", "*.bmp", "*.tiff")
ans.Add(cli.OptionSpec{
            Name: "--match -m",
            Type: "",
            Dest: "Match",
            Help: "The window to match. Match specifications are of the form: :italic:`field:query`. Where :italic:`field` can be one of: :code:`id`, :code:`title`, :code:`pid`, :code:`cwd`, :code:`cmdline`, :code:`num`, :code:`env`, :code:`var`, :code:`state`, :code:`neighbor`, :code:`session` and :code:`recent`. :italic:`query` is the expression to match. Expressions can be either a number or a regular expression, and can be :ref:`combined using Boolean operators <search_syntax>`.\n\nThe special value :code:`all` matches all windows.\n\nFor numeric fields: :code:`id`, :code:`pid`, :code:`num` and :code:`recent`, the expression is interpreted as a number, not a regular expression. Negative values for :code:`id` match from the highest id number down, in particular, -1 is the most recently created window.\n\nThe field :code:`num` refers to the window position in the current tab, starting from zero and counting clockwise (this is the same as the order in which the windows are reported by the :ref:`kitten @ ls <at-ls>` command).\n\nThe window id of the current window is available as the :envvar:`KITTY_WINDOW_ID` environment variable.\n\nThe field :code:`recent` refers to recently active windows in the currently active tab, with zero being the currently active window, one being the previously active window and so on.\n\nThe field :code:`neighbor` refers to a neighbor of the active window in the specified direction, which can be: :code:`left`, :code:`right`, :code:`top` or :code:`bottom`.\n\nThe field :code:`session` matches windows that were created in the specified session. Use the expression :code:`^$` to match windows that were not created in a session and :code:`.` to match the currently active session and :code:`~` to match either the currently active sesison or the last active session when no session is active.\n\nWhen using the :code:`env` field to match on environment variables, you can specify only the environment variable name or a name and value, for example, :code:`env:MY_ENV_VAR=2`.\n\nSimilarly, the :code:`var` field matches on user variables set on the window. You can specify name or name and value as with the :code:`env` field.\n\nThe field :code:`state` matches on the state of the window. Supported states are: :code:`active`, :code:`focused`, :code:`needs_attention`, :code:`parent_active`, :code:`parent_focused`, :code:`self`, :code:`overlay_parent`.  Active windows are the windows that are active in their parent tab. There is only one focused window and it is the window to which keyboard events are delivered. If no window is focused, the last focused window is matched. The value :code:`self` matches the window in which the remote control command is run. The value :code:`overlay_parent` matches the window that is under the :code:`self` window, when the self window is an overlay.\n\nNote that you can use the :ref:`kitten @ ls <at-ls>` command to get a list of windows.",
        })
ans.Add(cli.OptionSpec{
            Name: "--self",
            Type: "bool-set",
            Dest: "Self",
            Help: "Act on the window this command is run in, rather than the active window.",
        })
ans.Add(cli.OptionSpec{
            Name: "--position",
            Type: "",
            Dest: "Position",
            Help: "The position for the window logo. See :opt:`window_logo_position`.",
        })
ans.Add(cli.OptionSpec{
            Name: "--alpha",
            Type: "float",
            Dest: "Alpha",
            Help: "The amount the window logo should be faded into the background. See :opt:`window_logo_position`.",
        
	Default: "-1",
})
ans.Add(cli.OptionSpec{
            Name: "--no-response",
            Type: "bool-set",
            Dest: "NoResponse",
            Help: "Don't wait for a response from kitty. This means that even if setting the image failed, the command will exit with a success code.",
        
	Default: "false",
})
	return ans
}

func init() {
	register_at_cmd(setup_set_window_logo)
}
