// Code generated by go_code.py; DO NOT EDIT.




// License: GPLv3 Copyright: 2022, Kovid Goyal, <kovid at kovidgoyal.net>

// Code generated by gen-go-code.py; DO NOT EDIT.

package at

import (
	"fmt"
	"strings"
	"time"

	"github.com/kovidgoyal/kitty/tools/cli"
	"github.com/kovidgoyal/kitty/tools/utils"
)

var _ = fmt.Print
var _ = strings.Join

type options_set_enabled_layouts_type struct {
	Match string
Configured bool
}

var options_set_enabled_layouts options_set_enabled_layouts_type

type set_enabled_layouts_json_type struct {
	Layouts []escaped_string`json:"layouts,omitempty"`
Match escaped_string`json:"match,omitempty"`
Configured bool`json:"configured,omitempty"`
}

func create_payload_set_enabled_layouts(io_data *rc_io_data, cmd *cli.Command, args []string) (err error) {
	payload := set_enabled_layouts_json_type{}
	if len(args) < 1 { return fmt.Errorf("%s", "Must specify at least one argument to set_enabled_layouts") }
achoices := map[string]bool{"stack":true, "tall":true, "fat":true, "vertical":true, "horizontal":true, "grid":true, "splits":true,}
for _, a := range args {
if !achoices[a] { return fmt.Errorf("Not a valid choice: %s. Allowed values are: %s", a, "stack, tall, fat, vertical, horizontal, grid, splits") }
}
payload.Layouts = escape_list_of_strings(args)
payload.Match = escaped_string(options_set_enabled_layouts.Match)
payload.Configured = options_set_enabled_layouts.Configured
	io_data.rc.Payload = payload
	return
}

func create_rc_set_enabled_layouts(args []string) (*utils.RemoteControlCmd, error) {
	rc := utils.RemoteControlCmd{
		Cmd:        "set-enabled-layouts",
		Version:    ProtocolVersion,
		NoResponse: false,
		Stream:     false,
	}
	if rc.Stream {
		stream_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.StreamId = stream_id
	}
	if false {
		async_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.Async = async_id
	}
	return &rc, nil
}

func run_set_enabled_layouts(cmd *cli.Command, args []string) (return_code int, err error) {
	err = cmd.GetOptionValues(&options_set_enabled_layouts)
	if err != nil {
		return
	}

	rc, err := create_rc_set_enabled_layouts(args)
	if err != nil {
		return
	}
	nrv, err := cli.GetOptionValue[bool](cmd, "NoResponse")
	if err == nil {
		rc.NoResponse = nrv
	}
	var timeout float64 = 10.0
	rt, err := cli.GetOptionValue[float64](cmd, "ResponseTimeout")
	if err == nil {
		timeout = rt
	}
	io_data := rc_io_data{
		cmd:                    cmd,
		rc:                     rc,
		timeout:                time.Duration(timeout * float64(time.Second)),
		string_response_is_err: false,
	}
	err = create_payload_set_enabled_layouts(&io_data, cmd, args)
	if err != nil {
		return
	}

	err = send_rc_command(&io_data)
	if ee, ok := err.(*exit_error); ok && !running_shell {
		return ee.exit_code, nil
	}
	return
}

func setup_set_enabled_layouts(parent *cli.Command) *cli.Command {
	ans := parent.AddSubCommand(&cli.Command{
		Name:             "set-enabled-layouts",
		Usage:            " LAYOUT ...",
		ShortDescription: "Set the enabled layouts in tabs",
		HelpText:         "Set the enabled layouts in the specified tabs (or the active tab if not specified). You can use special match value :code:`all` to set the enabled layouts in all tabs. If the current layout of the tab is not included in the enabled layouts, its layout is changed to the first enabled layout.",
		Run:              run_set_enabled_layouts,
	})
	ans.ArgCompleter = cli.NamesCompleter("Layout", "stack", "tall", "fat", "vertical", "horizontal", "grid", "splits")
ans.Add(cli.OptionSpec{
            Name: "--match -m",
            Type: "",
            Dest: "Match",
            Help: "The tab to match. Match specifications are of the form: :italic:`field:query`. Where :italic:`field` can be one of: :code:`id`, :code:`index`, :code:`title`, :code:`window_id`, :code:`window_title`, :code:`pid`, :code:`cwd`, :code:`cmdline` :code:`env`, :code:`var`, :code:`state`, :code:`session` and :code:`recent`. :italic:`query` is the expression to match. Expressions can be either a number or a regular expression, and can be :ref:`combined using Boolean operators <search_syntax>`.\n\nThe special value :code:`all` matches all tabs.\n\nFor numeric fields: :code:`id`, :code:`index`, :code:`window_id`, :code:`pid` and :code:`recent`, the expression is interpreted as a number, not a regular expression. Negative values for :code:`id`/:code:`window_id` match from the highest id number down, in particular, -1 is the most recently created tab/window.\n\nWhen using :code:`title` or :code:`id`, first a matching tab is looked for, and if not found a matching window is looked for, and the tab for that window is used.\n\nYou can also use :code:`window_id` and :code:`window_title` to match the tab that contains the window with the specified id or title.\n\nThe :code:`index` number is used to match the nth tab in the currently active OS window. The :code:`recent` number matches recently active tabs in the currently active OS window, with zero being the currently active tab, one the previously active tab and so on.\n\nThe field :code:`session` matches tabs that were created in the specified session. Use the expression :code:`^$` to match windows that were not created in a session and :code:`.` to match the currently active session and :code:`~` to match either the currently active sesison or the last active session when no session is active.\n\nWhen using the :code:`env` field to match on environment variables, you can specify only the environment variable name or a name and value, for example, :code:`env:MY_ENV_VAR=2`. Tabs containing any window with the specified environment variables are matched. Similarly, :code:`var` matches tabs containing any window with the specified user variable.\n\nThe field :code:`state` matches on the state of the tab. Supported states are: :code:`active`, :code:`focused`, :code:`needs_attention`, :code:`parent_active` and :code:`parent_focused`. Active tabs are the tabs that are active in their parent OS window. There is only one focused tab and it is the tab to which keyboard events are delivered. If no tab is focused, the last focused tab is matched.\n\nNote that you can use the :ref:`kitten @ ls <at-ls>` command to get a list of tabs.",
        })
ans.Add(cli.OptionSpec{
            Name: "--configured",
            Type: "bool-set",
            Dest: "Configured",
            Help: "Change the default enabled layout value so that the new value takes effect for all newly created tabs as well.",
        })
	return ans
}

func init() {
	register_at_cmd(setup_set_enabled_layouts)
}
