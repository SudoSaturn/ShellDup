// Code generated by go_code.py; DO NOT EDIT.




// License: GPLv3 Copyright: 2022, Kovid Goyal, <kovid at kovidgoyal.net>

// Code generated by gen-go-code.py; DO NOT EDIT.

package at

import (
	"fmt"
	"strings"
	"time"

	"github.com/kovidgoyal/kitty/tools/cli"
	"github.com/kovidgoyal/kitty/tools/utils"
)

var _ = fmt.Print
var _ = strings.Join

type options_resize_os_window_type struct {
	Match string
Action string
Unit string
Width int
Height int
Incremental bool
Self bool
}

var options_resize_os_window options_resize_os_window_type

type resize_os_window_json_type struct {
	Match escaped_string`json:"match,omitempty"`
Self bool`json:"self,omitempty"`
Incremental bool`json:"incremental,omitempty"`
Action string`json:"action,omitempty"`
Unit string`json:"unit,omitempty"`
Width int`json:"width,omitempty"`
Height int`json:"height,omitempty"`
Os_panel []escaped_string`json:"os_panel,omitempty"`
}

func create_payload_resize_os_window(io_data *rc_io_data, cmd *cli.Command, args []string) (err error) {
	payload := resize_os_window_json_type{}
	payload.Os_panel, err = escape_list_of_strings(args), nil
if err != nil { return err }
payload.Match = escaped_string(options_resize_os_window.Match)
payload.Self = options_resize_os_window.Self
payload.Incremental = options_resize_os_window.Incremental
payload.Action = options_resize_os_window.Action
payload.Unit = options_resize_os_window.Unit
payload.Width = options_resize_os_window.Width
payload.Height = options_resize_os_window.Height
	io_data.rc.Payload = payload
	return
}

func create_rc_resize_os_window(args []string) (*utils.RemoteControlCmd, error) {
	rc := utils.RemoteControlCmd{
		Cmd:        "resize-os-window",
		Version:    ProtocolVersion,
		NoResponse: false,
		Stream:     false,
	}
	if rc.Stream {
		stream_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.StreamId = stream_id
	}
	if false {
		async_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.Async = async_id
	}
	return &rc, nil
}

func run_resize_os_window(cmd *cli.Command, args []string) (return_code int, err error) {
	err = cmd.GetOptionValues(&options_resize_os_window)
	if err != nil {
		return
	}

	rc, err := create_rc_resize_os_window(args)
	if err != nil {
		return
	}
	nrv, err := cli.GetOptionValue[bool](cmd, "NoResponse")
	if err == nil {
		rc.NoResponse = nrv
	}
	var timeout float64 = 10.0
	rt, err := cli.GetOptionValue[float64](cmd, "ResponseTimeout")
	if err == nil {
		timeout = rt
	}
	io_data := rc_io_data{
		cmd:                    cmd,
		rc:                     rc,
		timeout:                time.Duration(timeout * float64(time.Second)),
		string_response_is_err: false,
	}
	err = create_payload_resize_os_window(&io_data, cmd, args)
	if err != nil {
		return
	}

	err = send_rc_command(&io_data)
	if ee, ok := err.(*exit_error); ok && !running_shell {
		return ee.exit_code, nil
	}
	return
}

func setup_resize_os_window(parent *cli.Command) *cli.Command {
	ans := parent.AddSubCommand(&cli.Command{
		Name:             "resize-os-window",
		Usage:            " [OS Panel settings ...]",
		ShortDescription: "Resize/show/hide/etc. the specified OS Windows",
		HelpText:         "Resize (or other operations) on the specified OS Windows. Note that some window managers/environments do not allow applications to resize their windows, for example, tiling window managers.\n\nTo modify OS Panels created with the panel kitten, use :option:`--action`=:code:`os-panel`. Specify the modifications in the same syntax as used by the panel kitten, without the leading dashes. Use the :option:`--incremental` option to only change the specified panel settings. For example, move the panel to bottom edge and make it two lines tall: :code:`--action=os-panel --incremental lines=2 edge=bottom`",
		Run:              run_resize_os_window,
	})
	ans.Add(cli.OptionSpec{
            Name: "--match -m",
            Type: "",
            Dest: "Match",
            Help: "The window to match. Match specifications are of the form: :italic:`field:query`. Where :italic:`field` can be one of: :code:`id`, :code:`title`, :code:`pid`, :code:`cwd`, :code:`cmdline`, :code:`num`, :code:`env`, :code:`var`, :code:`state`, :code:`neighbor`, :code:`session` and :code:`recent`. :italic:`query` is the expression to match. Expressions can be either a number or a regular expression, and can be :ref:`combined using Boolean operators <search_syntax>`.\n\nThe special value :code:`all` matches all windows.\n\nFor numeric fields: :code:`id`, :code:`pid`, :code:`num` and :code:`recent`, the expression is interpreted as a number, not a regular expression. Negative values for :code:`id` match from the highest id number down, in particular, -1 is the most recently created window.\n\nThe field :code:`num` refers to the window position in the current tab, starting from zero and counting clockwise (this is the same as the order in which the windows are reported by the :ref:`kitten @ ls <at-ls>` command).\n\nThe window id of the current window is available as the :envvar:`KITTY_WINDOW_ID` environment variable.\n\nThe field :code:`recent` refers to recently active windows in the currently active tab, with zero being the currently active window, one being the previously active window and so on.\n\nThe field :code:`neighbor` refers to a neighbor of the active window in the specified direction, which can be: :code:`left`, :code:`right`, :code:`top` or :code:`bottom`.\n\nThe field :code:`session` matches windows that were created in the specified session. Use the expression :code:`^$` to match windows that were not created in a session and :code:`.` to match the currently active session and :code:`~` to match either the currently active sesison or the last active session when no session is active.\n\nWhen using the :code:`env` field to match on environment variables, you can specify only the environment variable name or a name and value, for example, :code:`env:MY_ENV_VAR=2`.\n\nSimilarly, the :code:`var` field matches on user variables set on the window. You can specify name or name and value as with the :code:`env` field.\n\nThe field :code:`state` matches on the state of the window. Supported states are: :code:`active`, :code:`focused`, :code:`needs_attention`, :code:`parent_active`, :code:`parent_focused`, :code:`self`, :code:`overlay_parent`.  Active windows are the windows that are active in their parent tab. There is only one focused window and it is the window to which keyboard events are delivered. If no window is focused, the last focused window is matched. The value :code:`self` matches the window in which the remote control command is run. The value :code:`overlay_parent` matches the window that is under the :code:`self` window, when the self window is an overlay.\n\nNote that you can use the :ref:`kitten @ ls <at-ls>` command to get a list of windows.",
        })
ans.Add(cli.OptionSpec{
            Name: "--action",
            Type: "choices",
            Dest: "Action",
            Help: "The action to perform.",
        
Choices: "resize, hide, os-panel, show, toggle-fullscreen, toggle-maximized, toggle-visibility",

Completer: cli.NamesCompleter("Choices for action", "resize", "hide", "os-panel", "show", "toggle-fullscreen", "toggle-maximized", "toggle-visibility"),
	Default: "resize",
})
ans.Add(cli.OptionSpec{
            Name: "--unit",
            Type: "choices",
            Dest: "Unit",
            Help: "The unit in which to interpret specified sizes.",
        
Choices: "cells, pixels",

Completer: cli.NamesCompleter("Choices for unit", "cells", "pixels"),
	Default: "cells",
})
ans.Add(cli.OptionSpec{
            Name: "--width",
            Type: "int",
            Dest: "Width",
            Help: "Change the width of the window. Zero leaves the width unchanged.",
        
	Default: "0",
})
ans.Add(cli.OptionSpec{
            Name: "--height",
            Type: "int",
            Dest: "Height",
            Help: "Change the height of the window. Zero leaves the height unchanged.",
        
	Default: "0",
})
ans.Add(cli.OptionSpec{
            Name: "--incremental",
            Type: "bool-set",
            Dest: "Incremental",
            Help: "Treat the specified sizes as increments on the existing window size instead of absolute sizes. When using :option:`--action`=:code:`os-panel`, only the specified settings are changed, otherwise non-specified settings keep their current value.",
        })
ans.Add(cli.OptionSpec{
            Name: "--self",
            Type: "bool-set",
            Dest: "Self",
            Help: "Resize the window this command is run in, rather than the active window.",
        })
ans.Add(cli.OptionSpec{
            Name: "--no-response",
            Type: "bool-set",
            Dest: "NoResponse",
            Help: "Don't wait for a response indicating the success of the action. Note that using this option means that you will not be notified of failures.",
        
	Default: "false",
})
	return ans
}

func init() {
	register_at_cmd(setup_resize_os_window)
}
