// Code generated by go_code.py; DO NOT EDIT.




// License: GPLv3 Copyright: 2022, Kovid Goyal, <kovid at kovidgoyal.net>

// Code generated by gen-go-code.py; DO NOT EDIT.

package at

import (
	"fmt"
	"strings"
	"time"

	"github.com/kovidgoyal/kitty/tools/cli"
	"github.com/kovidgoyal/kitty/tools/utils"
)

var _ = fmt.Print
var _ = strings.Join

type options_env_type struct {
	
}

var options_env options_env_type

type env_json_type struct {
	Env map[escaped_string]escaped_string`json:"env,omitempty"`
}

func create_payload_env(io_data *rc_io_data, cmd *cli.Command, args []string) (err error) {
	payload := env_json_type{}
	if len(args) < 1 { return fmt.Errorf("%s", "Must specify at least one argument to env") }
payload.Env = parse_key_val_args(args)
	io_data.rc.Payload = payload
	return
}

func create_rc_env(args []string) (*utils.RemoteControlCmd, error) {
	rc := utils.RemoteControlCmd{
		Cmd:        "env",
		Version:    ProtocolVersion,
		NoResponse: false,
		Stream:     false,
	}
	if rc.Stream {
		stream_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.StreamId = stream_id
	}
	if false {
		async_id, err := utils.HumanRandomId(128)
		if err != nil {
			return nil, err
		}
		rc.Async = async_id
	}
	return &rc, nil
}

func run_env(cmd *cli.Command, args []string) (return_code int, err error) {
	err = cmd.GetOptionValues(&options_env)
	if err != nil {
		return
	}

	rc, err := create_rc_env(args)
	if err != nil {
		return
	}
	nrv, err := cli.GetOptionValue[bool](cmd, "NoResponse")
	if err == nil {
		rc.NoResponse = nrv
	}
	var timeout float64 = 10.0
	rt, err := cli.GetOptionValue[float64](cmd, "ResponseTimeout")
	if err == nil {
		timeout = rt
	}
	io_data := rc_io_data{
		cmd:                    cmd,
		rc:                     rc,
		timeout:                time.Duration(timeout * float64(time.Second)),
		string_response_is_err: false,
	}
	err = create_payload_env(&io_data, cmd, args)
	if err != nil {
		return
	}

	err = send_rc_command(&io_data)
	if ee, ok := err.(*exit_error); ok && !running_shell {
		return ee.exit_code, nil
	}
	return
}

func setup_env(parent *cli.Command) *cli.Command {
	ans := parent.AddSubCommand(&cli.Command{
		Name:             "env",
		Usage:            " env_var1=val env_var2=val ...",
		ShortDescription: "Change environment variables seen by future children",
		HelpText:         "Change the environment variables that will be seen in newly launched windows. Similar to the :opt:`env` option in :file:`kitty.conf`, but affects running kitty instances. If no = is present, the variable is removed from the environment.",
		Run:              run_env,
	})
	
	return ans
}

func init() {
	register_at_cmd(setup_env)
}
