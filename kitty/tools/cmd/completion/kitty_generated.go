// Code generated by go_code.py; DO NOT EDIT.

package completion

import "github.com/kovidgoyal/kitty/tools/cli"
import "github.com/kovidgoyal/kitty/tools/cmd/tool"
import "github.com/kovidgoyal/kitty/tools/cmd/at"
func kitty(root *cli.Command) {
k := root.AddSubCommand(&cli.Command{Name:"kitty", SubCommandIsOptional: true, ArgCompleter: cli.CompleteExecutableFirstArg, SubCommandMustBeFirst: true })
kt := root.AddSubCommand(&cli.Command{Name:"kitten", SubCommandMustBeFirst: true })
tool.KittyToolEntryPoints(kt)
k.Add(cli.OptionSpec{
            Name: "--title -T",
            Type: "",
            Dest: "Title",
            Help: "Set the OS window title. This will override any title set by the program running inside kitty, permanently fixing the OS window's title. So only use this if you are running a program that does not set titles.",
        })
k.Add(cli.OptionSpec{
            Name: "--config -c",
            Type: "list",
            Dest: "Config",
            Help: "Specify a path to the configuration file(s) to use. All configuration files are merged onto the builtin :file:`kitty.conf`, overriding the builtin values. This option can be specified multiple times to read multiple configuration files in sequence, which are merged. Use the special value :code:`NONE` to not load any config file.\n\nIf this option is not specified, config files are searched for in the order: :file:`$XDG_CONFIG_HOME/kitty/kitty.conf`, :file:`~/.config/kitty/kitty.conf`, :file:`~/Library/Preferences/kitty/kitty.conf`, :file:`$XDG_CONFIG_DIRS/kitty/kitty.conf`. The first one that exists is used as the config file.\n\nIf the environment variable :envvar:`KITTY_CONFIG_DIRECTORY` is specified, that directory is always used and the above searching does not happen.\n\nIf :file:`/etc/xdg/kitty/kitty.conf` exists, it is merged before (i.e. with lower priority) than any user config files. It can be used to specify system-wide defaults for all users. You can use either :code:`-` or :file:`/dev/stdin` to read the config from STDIN.",
        Completer: cli.ChainCompleters(cli.NamesCompleter("Keywords", "none", "NONE"), cli.FnmatchCompleter("Config files", cli.CWD, "*.conf")),})
k.Add(cli.OptionSpec{
            Name: "--override -o",
            Type: "list",
            Dest: "Override",
            Help: "Override individual configuration options, can be specified multiple times. Syntax: :italic:`name=value`. For example: :option:`kitty -o` font_size=20",
        Completer: complete_kitty_override,})
k.Add(cli.OptionSpec{
            Name: "--directory --working-directory -d",
            Type: "",
            Dest: "Directory",
            Help: "Change to the specified directory when launching.",
        Completer: cli.DirectoryCompleter("Directories", cli.CWD),
	Default: ".",
})
k.Add(cli.OptionSpec{
            Name: "--detach",
            Type: "bool-set",
            Dest: "Detach",
            Help: "Detach from the controlling terminal, if any. On macOS use :code:`open -a kitty.app -n` instead.",
        })
k.Add(cli.OptionSpec{
            Name: "--detached-log",
            Type: "",
            Dest: "DetachedLog",
            Help: "Path to a log file to store STDOUT/STDERR when using :option:`--detach`",
        })
k.Add(cli.OptionSpec{
            Name: "--session",
            Type: "",
            Dest: "Session",
            Help: "Path to a file containing the startup :italic:`session` (tabs, windows, layout, programs). Use - to read from STDIN. See :ref:`sessions` for details and an example. Environment variables in the file name are expanded, relative paths are resolved relative to the kitty configuration directory. The special value :code:`none` means no session will be used, even if the :opt:`startup_session` option has been specified in kitty.conf. Note that using this option means the command line arguments to kitty specifying a program to run are ignored.",
        Completer: cli.FnmatchCompleter("Session files", cli.CONFIG, "*.session"),})
k.Add(cli.OptionSpec{
            Name: "--hold",
            Type: "bool-set",
            Dest: "Hold",
            Help: "Remain open, at a shell prompt, after child process exits. Note that this only affects the first window. You can quit by either using the close window shortcut or running the exit command.",
        })
k.Add(cli.OptionSpec{
            Name: "--single-instance -1",
            Type: "bool-set",
            Dest: "SingleInstance",
            Help: "If specified only a single instance of :italic:`kitty` will run. New invocations will instead create a new top-level window in the existing :italic:`kitty` instance. This allows :italic:`kitty` to share a single sprite cache on the GPU and also reduces startup time. You can also have separate groups of :italic:`kitty` instances by using the :option:`kitty --instance-group` option.",
        })
k.Add(cli.OptionSpec{
            Name: "--instance-group",
            Type: "",
            Dest: "InstanceGroup",
            Help: "Used in combination with the :option:`kitty --single-instance` option. All :italic:`kitty` invocations with the same :option:`kitty --instance-group` will result in new windows being created in the first :italic:`kitty` instance within that group.",
        })
k.Add(cli.OptionSpec{
            Name: "--wait-for-single-instance-window-close",
            Type: "bool-set",
            Dest: "WaitForSingleInstanceWindowClose",
            Help: "Normally, when using :option:`kitty --single-instance`, :italic:`kitty` will open a new window in an existing instance and quit immediately. With this option, it will not quit till the newly opened window is closed. Note that if no previous instance is found, then :italic:`kitty` will wait anyway, regardless of this option.",
        })
k.Add(cli.OptionSpec{
            Name: "--listen-on",
            Type: "",
            Dest: "ListenOn",
            Help: "Listen on the specified socket address for control messages. For example, :option:`kitty --listen-on`=unix:/tmp/mykitty or :option:`kitty --listen-on`=tcp:localhost:12345. On Linux systems, you can also use abstract UNIX sockets, not associated with a file, like this: :option:`kitty --listen-on`=unix:@mykitty. Environment variables are expanded and relative paths are resolved with respect to the temporary directory. To control kitty, you can send commands to it with :italic:`kitten @` using the :option:`kitten @ --to` option to specify this address. Note that if you run :italic:`kitten @` within a kitty window, there is no need to specify the :option:`kitten @ --to` option as it will automatically read from the environment. Note that this will be ignored unless :opt:`allow_remote_control` is set to either: :code:`yes`, :code:`socket` or :code:`socket-only`. This can also be specified in :file:`kitty.conf`.  To start in headless mode, without an actual window, use :option:`kitty --start-as`=hidden.",
        Completer: complete_kitty_listen_on,})
k.Add(cli.OptionSpec{
            Name: "--start-as",
            Type: "choices",
            Dest: "StartAs",
            Help: "Control how the initial kitty window is created.",
        
Choices: "normal, fullscreen, hidden, maximized, minimized",

Completer: cli.NamesCompleter("Choices for start-as", "normal", "fullscreen", "hidden", "maximized", "minimized"),
	Default: "normal",
})
k.Add(cli.OptionSpec{
            Name: "--position",
            Type: "",
            Dest: "Position",
            Help: "The position, for example 10x20, on screen at which to place the first kitty OS Window. This may or may not work depending on the policies of the desktop environment/window manager. It never works on Wayland. See also :opt:`remember_window_position` to have kitty automatically try to restore the previous window position.",
        })
k.Add(cli.OptionSpec{
            Name: "--grab-keyboard",
            Type: "bool-set",
            Dest: "GrabKeyboard",
            Help: "Grab the keyboard. This means global shortcuts defined in the OS will be passed to kitty instead. Useful if you want to create an OS modal window. How well this works depends on the OS/window manager/desktop environment. On Wayland it works only if the compositor implements the :link:`inhibit-keyboard-shortcuts protocol <https://wayland.app/protocols/keyboard-shortcuts-inhibit-unstable-v1>`. On macOS Apple doesn't allow applications to grab the keyboard without special permissions, so it doesn't work.",
        })
k.Add(cli.OptionSpec{
            Name: "--version -v",
            Type: "bool-set",
            Dest: "Version",
            Help: "The current kitty version.",
        })
k.Add(cli.OptionSpec{
            Name: "--dump-commands",
            Type: "bool-set",
            Dest: "DumpCommands",
            Help: "Output commands received from child process to STDOUT.",
        })
k.Add(cli.OptionSpec{
            Name: "--replay-commands",
            Type: "",
            Dest: "ReplayCommands",
            Help: "Replay previously dumped commands. Specify the path to a dump file previously created by :option:`kitty --dump-commands`. You can open a new kitty window to replay the commands with::\n\n    kitty sh -c \"kitty --replay-commands /path/to/dump/file; read\"",
        })
k.Add(cli.OptionSpec{
            Name: "--dump-bytes",
            Type: "",
            Dest: "DumpBytes",
            Help: "Path to file in which to store the raw bytes received from the child process.",
        })
k.Add(cli.OptionSpec{
            Name: "--debug-gl --debug-rendering",
            Type: "bool-set",
            Dest: "DebugRendering",
            Help: "Debug rendering commands. This will cause all OpenGL calls to check for errors instead of ignoring them. Also prints out miscellaneous debug information. Useful when debugging rendering problems.",
        })
k.Add(cli.OptionSpec{
            Name: "--debug-input --debug-keyboard",
            Type: "bool-set",
            Dest: "DebugKeyboard",
            Help: "Print out key and mouse events as they are received.",
        })
k.Add(cli.OptionSpec{
            Name: "--debug-font-fallback",
            Type: "bool-set",
            Dest: "DebugFontFallback",
            Help: "Print out information about the selection of fallback fonts for characters not present in the main font.",
        })
k.Add(cli.OptionSpec{
            Name: "--watcher",
            Type: "",
            Dest: "Watcher",
            Help: "This option is deprecated in favor of the :opt:`watcher` option in :file:`kitty.conf` and should not be used.",
        Completer: cli.FnmatchCompleter("Watcher files", cli.CONFIG, "*.py"),})
k.Add(cli.OptionSpec{
            Name: "--execute -e",
            Type: "bool-set",
            Dest: "Execute",
            Help: "!",
        })
plus := k.AddSubCommand(&cli.Command{Name:"+", Group:"Entry points", ShortDescription: "Various special purpose tools and kittens"})
plus_launch := plus.AddSubCommand(&cli.Command{Name:"launch", Group:"Entry points", ShortDescription: "Launch Python scripts", ArgCompleter: complete_plus_launch})
k.AddClone("", plus_launch).Name = "+launch"
plus_list_fonts := plus.AddSubCommand(&cli.Command{Name:"list-fonts", Group:"Entry points", ShortDescription: "List all available monospaced fonts"})
k.AddClone("", plus_list_fonts).Name = "+list-fonts"
plus_runpy := plus.AddSubCommand(&cli.Command{Name: "runpy", Group:"Entry points", ArgCompleter: complete_plus_runpy, ShortDescription: "Run Python code"})
k.AddClone("", plus_runpy).Name = "+runpy"
plus_open := plus.AddSubCommand(&cli.Command{Name:"open", Group:"Entry points", ArgCompleter: complete_plus_open, ShortDescription: "Open files and URLs"})
for _, og := range k.OptionGroups { plus_open.OptionGroups = append(plus_open.OptionGroups, og.Clone(plus_open)) }
k.AddClone("", plus_open).Name = "+open"
plus_kitten := plus.AddSubCommand(&cli.Command{Name:"kitten", Group:"Kittens", SubCommandMustBeFirst: true})
kitten_ask := plus_kitten.AddSubCommand(&cli.Command{Name:"ask", Group: "Kittens"})
kitten_ask.Add(cli.OptionSpec{
            Name: "--type -t",
            Type: "choices",
            Dest: "Type",
            Help: "Type of input. Defaults to asking for a line of text.",
        
Choices: "line, choices, file, password, yesno",

Completer: cli.NamesCompleter("Choices for type", "line", "choices", "file", "password", "yesno"),
	Default: "line",
})
kitten_ask.Add(cli.OptionSpec{
            Name: "--message -m",
            Type: "",
            Dest: "Message",
            Help: "The message to display to the user. If not specified a default message is shown.",
        })
kitten_ask.Add(cli.OptionSpec{
            Name: "--name -n",
            Type: "",
            Dest: "Name",
            Help: "The name for this question. Used to store history of previous answers which can be used for completions and via the browse history readline bindings.",
        })
kitten_ask.Add(cli.OptionSpec{
            Name: "--title --window-title",
            Type: "",
            Dest: "Title",
            Help: "The title for the window in which the question is displayed. Only implemented for yesno and choices types.",
        })
kitten_ask.Add(cli.OptionSpec{
            Name: "--choice -c",
            Type: "list",
            Dest: "Choices",
            Help: "A choice for the choices type. Can be specified multiple times. Every choice has the syntax: ``letter[;color]:text``, where :italic:`text` is the choice text and :italic:`letter` is the selection key. :italic:`letter` is a single letter belonging to :italic:`text`. This letter is highlighted within the choice text. There can be an optional color specification after the letter to indicate what color it should be. For example: :code:`y:Yes` and :code:`n;red:No`",
        })
kitten_ask.Add(cli.OptionSpec{
            Name: "--default -d",
            Type: "",
            Dest: "Default",
            Help: "A default choice or text. If unspecified, it is :code:`y` for the type :code:`yesno`, the first choice for :code:`choices` and empty for others types. The default choice is selected when the user presses the :kbd:`Enter` key.",
        })
kitten_ask.Add(cli.OptionSpec{
            Name: "--prompt -p",
            Type: "",
            Dest: "Prompt",
            Help: "The prompt to use when inputting a line of text or a password.",
        
	Default: "\"> \"",
})
kitten_ask.Add(cli.OptionSpec{
            Name: "--unhide-key",
            Type: "",
            Dest: "UnhideKey",
            Help: "The key to be pressed to unhide hidden text",
        
	Default: "u",
})
kitten_ask.Add(cli.OptionSpec{
            Name: "--hidden-text-placeholder",
            Type: "",
            Dest: "HiddenTextPlaceholder",
            Help: "The text in the message to be replaced by hidden text. The hidden text is read via STDIN.",
        })
kitten_broadcast := plus_kitten.AddSubCommand(&cli.Command{Name:"broadcast", Group: "Kittens"})
kitten_broadcast.Add(cli.OptionSpec{
            Name: "--hide-input-toggle",
            Type: "",
            Dest: "HideInputToggle",
            Help: "Key to press that will toggle hiding of the input in the broadcast window itself. Useful while typing a password, prevents the password from being visible on the screen.",
        
	Default: "Ctrl+Alt+Esc",
})
kitten_broadcast.Add(cli.OptionSpec{
            Name: "--end-session",
            Type: "",
            Dest: "EndSession",
            Help: "Key to press to end the broadcast session.",
        
	Default: "Ctrl+Esc",
})
kitten_broadcast.Add(cli.OptionSpec{
            Name: "--match -m",
            Type: "",
            Dest: "Match",
            Help: "The window to match. Match specifications are of the form: :italic:`field:query`. Where :italic:`field` can be one of: :code:`id`, :code:`title`, :code:`pid`, :code:`cwd`, :code:`cmdline`, :code:`num`, :code:`env`, :code:`var`, :code:`state`, :code:`neighbor`, :code:`session` and :code:`recent`. :italic:`query` is the expression to match. Expressions can be either a number or a regular expression, and can be :ref:`combined using Boolean operators <search_syntax>`.\n\nThe special value :code:`all` matches all windows.\n\nFor numeric fields: :code:`id`, :code:`pid`, :code:`num` and :code:`recent`, the expression is interpreted as a number, not a regular expression. Negative values for :code:`id` match from the highest id number down, in particular, -1 is the most recently created window.\n\nThe field :code:`num` refers to the window position in the current tab, starting from zero and counting clockwise (this is the same as the order in which the windows are reported by the :ref:`kitten @ ls <at-ls>` command).\n\nThe window id of the current window is available as the :envvar:`KITTY_WINDOW_ID` environment variable.\n\nThe field :code:`recent` refers to recently active windows in the currently active tab, with zero being the currently active window, one being the previously active window and so on.\n\nThe field :code:`neighbor` refers to a neighbor of the active window in the specified direction, which can be: :code:`left`, :code:`right`, :code:`top` or :code:`bottom`.\n\nThe field :code:`session` matches windows that were created in the specified session. Use the expression :code:`^$` to match windows that were not created in a session and :code:`.` to match the currently active session and :code:`~` to match either the currently active sesison or the last active session when no session is active.\n\nWhen using the :code:`env` field to match on environment variables, you can specify only the environment variable name or a name and value, for example, :code:`env:MY_ENV_VAR=2`.\n\nSimilarly, the :code:`var` field matches on user variables set on the window. You can specify name or name and value as with the :code:`env` field.\n\nThe field :code:`state` matches on the state of the window. Supported states are: :code:`active`, :code:`focused`, :code:`needs_attention`, :code:`parent_active`, :code:`parent_focused`, :code:`self`, :code:`overlay_parent`.  Active windows are the windows that are active in their parent tab. There is only one focused window and it is the window to which keyboard events are delivered. If no window is focused, the last focused window is matched. The value :code:`self` matches the window in which the remote control command is run. The value :code:`overlay_parent` matches the window that is under the :code:`self` window, when the self window is an overlay.\n\nNote that you can use the :ref:`kitten @ ls <at-ls>` command to get a list of windows.",
        })
kitten_broadcast.Add(cli.OptionSpec{
            Name: "--match-tab -t",
            Type: "",
            Dest: "MatchTab",
            Help: "The tab to match. Match specifications are of the form: :italic:`field:query`. Where :italic:`field` can be one of: :code:`id`, :code:`index`, :code:`title`, :code:`window_id`, :code:`window_title`, :code:`pid`, :code:`cwd`, :code:`cmdline` :code:`env`, :code:`var`, :code:`state`, :code:`session` and :code:`recent`. :italic:`query` is the expression to match. Expressions can be either a number or a regular expression, and can be :ref:`combined using Boolean operators <search_syntax>`.\n\nThe special value :code:`all` matches all tabs.\n\nFor numeric fields: :code:`id`, :code:`index`, :code:`window_id`, :code:`pid` and :code:`recent`, the expression is interpreted as a number, not a regular expression. Negative values for :code:`id`/:code:`window_id` match from the highest id number down, in particular, -1 is the most recently created tab/window.\n\nWhen using :code:`title` or :code:`id`, first a matching tab is looked for, and if not found a matching window is looked for, and the tab for that window is used.\n\nYou can also use :code:`window_id` and :code:`window_title` to match the tab that contains the window with the specified id or title.\n\nThe :code:`index` number is used to match the nth tab in the currently active OS window. The :code:`recent` number matches recently active tabs in the currently active OS window, with zero being the currently active tab, one the previously active tab and so on.\n\nThe field :code:`session` matches tabs that were created in the specified session. Use the expression :code:`^$` to match windows that were not created in a session and :code:`.` to match the currently active session and :code:`~` to match either the currently active sesison or the last active session when no session is active.\n\nWhen using the :code:`env` field to match on environment variables, you can specify only the environment variable name or a name and value, for example, :code:`env:MY_ENV_VAR=2`. Tabs containing any window with the specified environment variables are matched. Similarly, :code:`var` matches tabs containing any window with the specified user variable.\n\nThe field :code:`state` matches on the state of the tab. Supported states are: :code:`active`, :code:`focused`, :code:`needs_attention`, :code:`parent_active` and :code:`parent_focused`. Active tabs are the tabs that are active in their parent OS window. There is only one focused tab and it is the tab to which keyboard events are delivered. If no tab is focused, the last focused tab is matched.\n\nNote that you can use the :ref:`kitten @ ls <at-ls>` command to get a list of tabs.",
        })
kitten_choose_files := plus_kitten.AddSubCommand(&cli.Command{Name:"choose_files", Group: "Kittens"})
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--mode",
            Type: "choices",
            Dest: "Mode",
            Help: "The type of object(s) to select",
        
Choices: "file, dir, dirs, files, save-dir, save-file, save-files",

Completer: cli.NamesCompleter("Choices for mode", "file", "dir", "dirs", "files", "save-dir", "save-file", "save-files"),
	Default: "file",
})
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--file-filter",
            Type: "list",
            Dest: "FileFilter",
            Help: "A list of filters to restrict the displayed files. Can be either mimetypes, or glob style patterns. Can be specified multiple times. The syntax is :code:`type:expression:Descriptive Name`. For example: :code:`mime:image/png:Images` and :code:`mime:image/gif:Images` and :code:`glob:*.[tT][xX][Tt]:Text files`. Note that glob patterns are case-sensitive. The mimetype specification is treated as a glob expressions as well, so you can, for example, use :code:`mime:text/*` to match all text files. The first filter in the list will be applied by default. Use a filter such as :code:`glob:*:All` to match all files. Note that filtering only appies to files, not directories.",
        })
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--suggested-save-file-name",
            Type: "",
            Dest: "SuggestedSaveFileName",
            Help: "A suggested name when picking a save file.",
        })
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--suggested-save-file-path",
            Type: "",
            Dest: "SuggestedSaveFilePath",
            Help: "Path to an existing file to use as the save file.",
        })
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--title",
            Type: "",
            Dest: "Title",
            Help: "Window title to use for this chooser",
        })
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--display-title",
            Type: "bool-set",
            Dest: "DisplayTitle",
            Help: "Show the window title at the top, useful when this kitten is used in an OS window without a title bar.",
        })
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--override -o",
            Type: "list",
            Dest: "Override",
            Help: "Override individual configuration options, can be specified multiple times. Syntax: :italic:`name=value`.",
        })
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--config",
            Type: "list",
            Dest: "Config",
            Help: "Specify a path to the configuration file(s) to use. All configuration files are merged onto the builtin :file:`choose-files.conf`, overriding the builtin values. This option can be specified multiple times to read multiple configuration files in sequence, which are merged. Use the special value :code:`NONE` to not load any config file.\n\nIf this option is not specified, config files are searched for in the order: :file:`$XDG_CONFIG_HOME/kitty/choose-files.conf`, :file:`~/.config/kitty/choose-files.conf`, :file:`~/Library/Preferences/kitty/choose-files.conf`, :file:`$XDG_CONFIG_DIRS/kitty/choose-files.conf`. The first one that exists is used as the config file.\n\nIf the environment variable :envvar:`KITTY_CONFIG_DIRECTORY` is specified, that directory is always used and the above searching does not happen.\n\nIf :file:`/etc/xdg/kitty/choose-files.conf` exists, it is merged before (i.e. with lower priority) than any user config files. It can be used to specify system-wide defaults for all users. You can use either :code:`-` or :file:`/dev/stdin` to read the config from STDIN.",
        Completer: cli.ChainCompleters(cli.NamesCompleter("Keywords", "none", "NONE"), cli.FnmatchCompleter("Config files", cli.CWD, "*.conf")),})
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--write-output-to",
            Type: "",
            Dest: "WriteOutputTo",
            Help: "Path to a file to which the output is written in addition to STDOUT.",
        })
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--output-format",
            Type: "choices",
            Dest: "OutputFormat",
            Help: "The format in which to write the output.",
        
Choices: "text, json",

Completer: cli.NamesCompleter("Choices for output-format", "text", "json"),
	Default: "text",
})
kitten_choose_files.Add(cli.OptionSpec{
            Name: "--write-pid-to",
            Type: "",
            Dest: "WritePidTo",
            Help: "Path to a file to which to write the process ID (PID) of this process to.",
        })
kitten_choose_files.ArgCompleter = cli.DirectoryCompleter("Directories", cli.CWD)
kitten_choose_fonts := plus_kitten.AddSubCommand(&cli.Command{Name:"choose_fonts", Group: "Kittens"})
kitten_choose_fonts.HelpText = ""
kitten_clipboard := plus_kitten.AddSubCommand(&cli.Command{Name:"clipboard", Group: "Kittens"})
kitten_clipboard.Add(cli.OptionSpec{
            Name: "--get-clipboard -g",
            Type: "bool-set",
            Dest: "GetClipboard",
            Help: "Output the current contents of the clipboard to STDOUT. Note that by default kitty will prompt for permission to access the clipboard. Can be controlled by :opt:`clipboard_control`.",
        })
kitten_clipboard.Add(cli.OptionSpec{
            Name: "--use-primary -p",
            Type: "bool-set",
            Dest: "UsePrimary",
            Help: "Use the primary selection rather than the clipboard on systems that support it, such as Linux.",
        })
kitten_clipboard.Add(cli.OptionSpec{
            Name: "--mime -m",
            Type: "list",
            Dest: "Mime",
            Help: "The mimetype of the specified file. Useful when the auto-detected mimetype is likely to be incorrect or the filename has no extension and therefore no mimetype can be detected. If more than one file is specified, this option should be specified multiple times, once for each specified file. When copying data from the clipboard, you can use wildcards to match MIME types. For example: :code:`--mime 'text/*'` will match any textual MIME type available on the clipboard, usually the first matching MIME type is copied. The special MIME type :code:`.` will return the list of available MIME types currently on the system clipboard.",
        })
kitten_clipboard.Add(cli.OptionSpec{
            Name: "--alias -a",
            Type: "list",
            Dest: "Alias",
            Help: "Specify aliases for MIME types. Aliased MIME types are considered equivalent. When copying to clipboard both the original and alias are made available on the clipboard. When copying from clipboard if the original is not found, the alias is used, as a fallback. Can be specified multiple times to create multiple aliases. For example: :code:`--alias text/plain=text/x-rst` makes :code:`text/plain` an alias of :code:`text/rst`. Aliases are not used in filter mode. An alias for :code:`text/plain` is automatically created if :code:`text/plain` is not present in the input data, but some other :code:`text/*` MIME is present.",
        })
kitten_clipboard.Add(cli.OptionSpec{
            Name: "--wait-for-completion",
            Type: "bool-set",
            Dest: "WaitForCompletion",
            Help: "Wait till the copy to clipboard is complete before exiting. Useful if running the kitten in a dedicated, ephemeral window. Only needed in filter mode.",
        })
kitten_clipboard.Add(cli.OptionSpec{
            Name: "--password",
            Type: "",
            Dest: "Password",
            Help: "A password to use when accessing the clipboard. If the user chooses to accept the password future invocations of the kitten will not have a permission prompt in this tty session. Does not work in filter mode. Must be of the form: text:actual-password or fd:integer (a file descriptor number to read the password from) or file:path-to-file (a file from which to read the password). Note that you must also specify a human friendly name using the :option:`--human-name` flag.",
        })
kitten_clipboard.Add(cli.OptionSpec{
            Name: "--human-name",
            Type: "",
            Dest: "HumanName",
            Help: "A human friendly name to show the user when asking for permission to access the clipboard.",
        })
kitten_clipboard.ArgCompleter = cli.MimepatCompleter("Files", cli.CWD, "*")
kitten_desktop_ui := plus_kitten.AddSubCommand(&cli.Command{Name:"desktop_ui", Group: "Kittens"})
kitten_desktop_ui.HelpText = ""
kitten_diff := plus_kitten.AddSubCommand(&cli.Command{Name:"diff", Group: "Kittens"})
kitten_diff.Add(cli.OptionSpec{
            Name: "--context",
            Type: "int",
            Dest: "Context",
            Help: "Number of lines of context to show between changes. Negative values use the number set in :file:`diff.conf`.",
        
	Default: "-1",
})
kitten_diff.Add(cli.OptionSpec{
            Name: "--config",
            Type: "list",
            Dest: "Config",
            Help: "Specify a path to the configuration file(s) to use. All configuration files are merged onto the builtin :file:`diff.conf`, overriding the builtin values. This option can be specified multiple times to read multiple configuration files in sequence, which are merged. Use the special value :code:`NONE` to not load any config file.\n\nIf this option is not specified, config files are searched for in the order: :file:`$XDG_CONFIG_HOME/kitty/diff.conf`, :file:`~/.config/kitty/diff.conf`, :file:`~/Library/Preferences/kitty/diff.conf`, :file:`$XDG_CONFIG_DIRS/kitty/diff.conf`. The first one that exists is used as the config file.\n\nIf the environment variable :envvar:`KITTY_CONFIG_DIRECTORY` is specified, that directory is always used and the above searching does not happen.\n\nIf :file:`/etc/xdg/kitty/diff.conf` exists, it is merged before (i.e. with lower priority) than any user config files. It can be used to specify system-wide defaults for all users. You can use either :code:`-` or :file:`/dev/stdin` to read the config from STDIN.",
        Completer: cli.ChainCompleters(cli.NamesCompleter("Keywords", "none", "NONE"), cli.FnmatchCompleter("Config files", cli.CWD, "*.conf")),})
kitten_diff.Add(cli.OptionSpec{
            Name: "--override -o",
            Type: "list",
            Dest: "Override",
            Help: "Override individual configuration options, can be specified multiple times. Syntax: :italic:`name=value`. For example: :italic:`-o background=gray`",
        })
kitten_diff.ArgCompleter = cli.MimepatCompleter("Text and image files", cli.CWD, "text/*", "image/*")
kitten_hints := plus_kitten.AddSubCommand(&cli.Command{Name:"hints", Group: "Kittens"})
kitten_hints.Add(cli.OptionSpec{
            Name: "--program",
            Type: "list",
            Dest: "Program",
            Help: "What program to use to open matched text. Defaults to the default open program for the operating system. Various special values are supported:\n\n:code:`-`\n    paste the match into the terminal window.\n\n:code:`@`\n    copy the match to the clipboard\n\n:code:`*`\n    copy the match to the primary selection (on systems that support primary selections)\n\n:code:`@NAME`\n    copy the match to the specified buffer, e.g. :code:`@a`\n\n:code:`default`\n    run the default open program. Note that when using the hyperlink :code:`--type` the default is to use the kitty :doc:`hyperlink handling </open_actions>` facilities.\n\n:code:`launch`\n    run :doc:`/launch` to open the program in a new kitty tab, window, overlay, etc. For example::\n\n        --program \"launch --type=tab vim\"\n\nCan be specified multiple times to run multiple programs.",
        })
kitten_hints.Add(cli.OptionSpec{
            Name: "--type",
            Type: "choices",
            Dest: "Type",
            Help: "The type of text to search for. A value of :code:`linenum` is special, it looks for error messages using the pattern specified with :option:`--regex`, which must have the named groups: :code:`path` and :code:`line`. If not specified, will look for :code:`path:line`. The :option:`--linenum-action` option controls where to display the selected error message, other options are ignored.",
        
Choices: "url, hash, hyperlink, ip, line, linenum, path, regex, word",

Completer: cli.NamesCompleter("Choices for type", "url", "hash", "hyperlink", "ip", "line", "linenum", "path", "regex", "word"),
	Default: "url",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--regex",
            Type: "",
            Dest: "Regex",
            Help: "The regular expression to use when option :option:`--type` is set to :code:`regex`, in Perl 5 syntax. If you specify a numbered group in the regular expression, only the group will be matched. This allows you to match text ignoring a prefix/suffix, as needed. The default expression matches lines. To match text over multiple lines, things get a little tricky, as line endings are a sequence of zero or more null bytes followed by either a carriage return or a newline character. To have a pattern match over line endings you will need to match the character set ``[\\0\\r\\n]``. The newlines and null bytes are automatically stripped from the returned text. If you specify named groups and a :option:`--program`, then the program will be passed arguments corresponding to each named group of the form :code:`key=value`.",
        
	Default: "(?m)^\\s*(.+?)\\s*$",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--linenum-action",
            Type: "choices",
            Dest: "LinenumAction",
            Help: "Where to perform the action on matched errors. :code:`self` means the current window, :code:`window` a new kitty window, :code:`tab` a new tab, :code:`os_window` a new OS window and :code:`background` run in the background. :code:`remote-control` is like background but the program can use kitty remote control without needing to turn on remote control globally. The actual action is whatever arguments are provided to the kitten, for example: :code:`kitten hints --type=linenum --linenum-action=tab vim +{line} {path}` will open the matched path at the matched line number in vim in a new kitty tab. Note that in order to use :option:`--program` to copy or paste the provided arguments, you need to use the special value :code:`self`.",
        
Choices: "self, background, os_window, remote-control, tab, window",

Completer: cli.NamesCompleter("Choices for linenum-action", "self", "background", "os_window", "remote-control", "tab", "window"),
	Default: "self",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--url-prefixes",
            Type: "",
            Dest: "UrlPrefixes",
            Help: "Comma separated list of recognized URL prefixes. Defaults to the list of prefixes defined by the :opt:`url_prefixes` option in :file:`kitty.conf`.",
        
	Default: "default",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--url-excluded-characters",
            Type: "",
            Dest: "UrlExcludedCharacters",
            Help: "Characters to exclude when matching URLs. Defaults to the list of characters defined by the :opt:`url_excluded_characters` option in :file:`kitty.conf`. The syntax for this option is the same as for :opt:`url_excluded_characters`.",
        
	Default: "default",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--word-characters",
            Type: "",
            Dest: "WordCharacters",
            Help: "Characters to consider as part of a word. In addition, all characters marked as alphanumeric in the Unicode database will be considered as word characters. Defaults to the :opt:`select_by_word_characters` option from :file:`kitty.conf`.",
        })
kitten_hints.Add(cli.OptionSpec{
            Name: "--minimum-match-length",
            Type: "int",
            Dest: "MinimumMatchLength",
            Help: "The minimum number of characters to consider a match.",
        
	Default: "3",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--multiple",
            Type: "bool-set",
            Dest: "Multiple",
            Help: "Select multiple matches and perform the action on all of them together at the end. In this mode, press :kbd:`Esc` to finish selecting.",
        })
kitten_hints.Add(cli.OptionSpec{
            Name: "--multiple-joiner",
            Type: "",
            Dest: "MultipleJoiner",
            Help: "String for joining multiple selections when copying to the clipboard or inserting into the terminal. The special values are: :code:`space` - a space character, :code:`newline` - a newline, :code:`empty` - an empty joiner, :code:`json` - a JSON serialized list, :code:`auto` - an automatic choice, based on the type of text being selected. In addition, integers are interpreted as zero-based indices into the list of selections. You can use :code:`0` for the first selection and :code:`-1` for the last.",
        
	Default: "auto",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--add-trailing-space",
            Type: "choices",
            Dest: "AddTrailingSpace",
            Help: "Add trailing space after matched text. Defaults to :code:`auto`, which adds the space when used together with :option:`--multiple`.",
        
Choices: "auto, always, never",

Completer: cli.NamesCompleter("Choices for add-trailing-space", "auto", "always", "never"),
	Default: "auto",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--hints-offset",
            Type: "int",
            Dest: "HintsOffset",
            Help: "The offset (from zero) at which to start hint numbering. Note that only numbers greater than or equal to zero are respected.",
        
	Default: "1",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--alphabet",
            Type: "",
            Dest: "Alphabet",
            Help: "The list of characters to use for hints. The default is to use numbers and lowercase English alphabets. Specify your preference as a string of characters. Note that you need to specify the :option:`--hints-offset` as zero to use the first character to highlight the first match, otherwise it will start with the second character by default.",
        })
kitten_hints.Add(cli.OptionSpec{
            Name: "--ascending",
            Type: "bool-set",
            Dest: "Ascending",
            Help: "Make the hints increase from top to bottom, instead of decreasing from top to bottom.",
        })
kitten_hints.Add(cli.OptionSpec{
            Name: "--hints-foreground-color",
            Type: "str",
            Dest: "HintsForegroundColor",
            Help: "The foreground color for hints. You can use color names or hex values. For the eight basic named terminal colors you can also use the :code:`bright-` prefix to get the bright variant of the color.",
        
	Default: "black",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--hints-background-color",
            Type: "str",
            Dest: "HintsBackgroundColor",
            Help: "The background color for hints. You can use color names or hex values. For the eight basic named terminal colors you can also use the :code:`bright-` prefix to get the bright variant of the color.",
        
	Default: "green",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--hints-text-color",
            Type: "str",
            Dest: "HintsTextColor",
            Help: "The foreground color for text pointed to by the hints. You can use color names or hex values. For the eight basic named terminal colors you can also use the :code:`bright-` prefix to get the bright variant of the color. The default is to pick a suitable color automatically.",
        
	Default: "auto",
})
kitten_hints.Add(cli.OptionSpec{
            Name: "--customize-processing",
            Type: "",
            Dest: "CustomizeProcessing",
            Help: "Name of a python file in the kitty config directory which will be imported to provide custom implementations for pattern finding and performing actions on selected matches. You can also specify absolute paths to load the script from elsewhere. See https://sw.kovidgoyal.net/kitty/kittens/hints/ for details.",
        })
kitten_hints.Add(cli.OptionSpec{
            Name: "--window-title",
            Type: "",
            Dest: "WindowTitle",
            Help: "The title for the hints window, default title is based on the type of text being hinted.",
        })
kitten_hyperlinked_grep := plus_kitten.AddSubCommand(&cli.Command{Name:"hyperlinked_grep", Group: "Kittens"})
kitten_hyperlinked_grep.ArgCompleter = cli.CompletionForWrapper("rg")
kitten_hyperlinked_grep.OnlyArgsAllowed = true
kitten_icat := plus_kitten.AddSubCommand(&cli.Command{Name:"icat", Group: "Kittens"})
kitten_icat.Add(cli.OptionSpec{
            Name: "--align",
            Type: "choices",
            Dest: "Align",
            Help: "Horizontal alignment for the displayed image.",
        
Choices: "center, left, right",

Completer: cli.NamesCompleter("Choices for align", "center", "left", "right"),
	Default: "center",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--place",
            Type: "",
            Dest: "Place",
            Help: "Choose where on the screen to display the image. The image will be scaled to fit into the specified rectangle. The syntax for specifying rectangles is <:italic:`width`>x<:italic:`height`>@<:italic:`left`>x<:italic:`top`>. All measurements are in cells (i.e. cursor positions) with the origin :italic:`(0, 0)` at the top-left corner of the screen. Note that the :option:`--align` option will horizontally align the image within this rectangle. By default, the image is horizontally centered within the rectangle. Using place will cause the cursor to be positioned at the top left corner of the image, instead of on the line after the image.",
        })
kitten_icat.Add(cli.OptionSpec{
            Name: "--scale-up",
            Type: "bool-set",
            Dest: "ScaleUp",
            Help: "When used in combination with :option:`--place` it will cause images that are smaller than the specified area to be scaled up to use as much of the specified area as possible.",
        })
kitten_icat.Add(cli.OptionSpec{
            Name: "--background",
            Type: "",
            Dest: "Background",
            Help: "Specify a background color, this will cause transparent images to be composited on top of the specified color.",
        
	Default: "none",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--mirror",
            Type: "choices",
            Dest: "Mirror",
            Help: "Mirror the image about a horizontal or vertical axis or both.",
        
Choices: "none, both, horizontal, vertical",

Completer: cli.NamesCompleter("Choices for mirror", "none", "both", "horizontal", "vertical"),
	Default: "none",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--clear",
            Type: "bool-set",
            Dest: "Clear",
            Help: "Remove all images currently displayed on the screen. Note that this cannot work with terminal multiplexers such as tmux since only the multiplexer can know the position of the screen.",
        })
kitten_icat.Add(cli.OptionSpec{
            Name: "--transfer-mode",
            Type: "choices",
            Dest: "TransferMode",
            Help: "Which mechanism to use to transfer images to the terminal. The default is to auto-detect. :italic:`file` means to use a temporary file, :italic:`memory` means to use shared memory, :italic:`stream` means to send the data via terminal escape codes. Note that if you use the :italic:`file` or :italic:`memory` transfer modes and you are connecting over a remote session then image display will not work.",
        
Choices: "detect, file, memory, stream",

Completer: cli.NamesCompleter("Choices for transfer-mode", "detect", "file", "memory", "stream"),
	Default: "detect",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--detect-support",
            Type: "bool-set",
            Dest: "DetectSupport",
            Help: "Detect support for image display in the terminal. If not supported, will exit with exit code 1, otherwise will exit with code 0 and print the supported transfer mode to stderr, which can be used with the :option:`--transfer-mode` option.",
        })
kitten_icat.Add(cli.OptionSpec{
            Name: "--detection-timeout",
            Type: "float",
            Dest: "DetectionTimeout",
            Help: "The amount of time (in seconds) to wait for a response from the terminal, when detecting image display support.",
        
	Default: "10",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--use-window-size",
            Type: "",
            Dest: "UseWindowSize",
            Help: "Instead of querying the terminal for the window size, use the specified size, which must be of the format: width_in_cells,height_in_cells,width_in_pixels,height_in_pixels",
        })
kitten_icat.Add(cli.OptionSpec{
            Name: "--print-window-size",
            Type: "bool-set",
            Dest: "PrintWindowSize",
            Help: "Print out the window size as <:italic:`width`>x<:italic:`height`> (in pixels) and quit. This is a convenience method to query the window size if using :code:`kitten icat` from a scripting language that cannot make termios calls.",
        })
kitten_icat.Add(cli.OptionSpec{
            Name: "--stdin",
            Type: "choices",
            Dest: "Stdin",
            Help: "Read image data from STDIN. The default is to do it automatically, when STDIN is not a terminal, but you can turn it off or on explicitly, if needed.",
        
Choices: "detect, no, yes",

Completer: cli.NamesCompleter("Choices for stdin", "detect", "no", "yes"),
	Default: "detect",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--silent",
            Type: "bool-set",
            Dest: "Silent",
            Help: "Not used, present for legacy compatibility.",
        })
kitten_icat.Add(cli.OptionSpec{
            Name: "--engine",
            Type: "choices",
            Dest: "Engine",
            Help: "The engine used for decoding and processing of images. The default is to use the most appropriate engine.  The :code:`builtin` engine uses Go's native imaging libraries. The :code:`magick` engine uses ImageMagick which requires it to be installed on the system.",
        
Choices: "auto, builtin, magick",

Completer: cli.NamesCompleter("Choices for engine", "auto", "builtin", "magick"),
	Default: "auto",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--z-index -z",
            Type: "",
            Dest: "ZIndex",
            Help: "Z-index of the image. When negative, text will be displayed on top of the image. Use a double minus for values under the threshold for drawing images under cell background colors. For example, :code:`--1` evaluates as -1,073,741,825.",
        
	Default: "0",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--loop -l",
            Type: "int",
            Dest: "Loop",
            Help: "Number of times to loop animations. Negative values loop forever. Zero means only the first frame of the animation is displayed. Otherwise, the animation is looped the specified number of times.",
        
	Default: "-1",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--hold",
            Type: "bool-set",
            Dest: "Hold",
            Help: "Wait for a key press before exiting after displaying the images.",
        })
kitten_icat.Add(cli.OptionSpec{
            Name: "--unicode-placeholder",
            Type: "bool-set",
            Dest: "UnicodePlaceholder",
            Help: "Use the Unicode placeholder method to display the images. Useful to display images from within full screen terminal programs that do not understand the kitty graphics protocol such as multiplexers or editors. See :ref:`graphics_unicode_placeholders` for details. Note that when using this method, images placed (with :option:`--place`) that do not fit on the screen, will get wrapped at the screen edge instead of getting truncated. This wrapping is per line and therefore the image will look like it is interleaved with blank lines.",
        })
kitten_icat.Add(cli.OptionSpec{
            Name: "--passthrough",
            Type: "choices",
            Dest: "Passthrough",
            Help: "Whether to surround graphics commands with escape sequences that allow them to passthrough programs like tmux. The default is to detect when running inside tmux and automatically use the tmux passthrough escape codes. Note that when this option is enabled it implies :option:`--unicode-placeholder` as well.",
        
Choices: "detect, none, tmux",

Completer: cli.NamesCompleter("Choices for passthrough", "detect", "none", "tmux"),
	Default: "detect",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--image-id",
            Type: "int",
            Dest: "ImageId",
            Help: "The graphics protocol id to use for the created image. Normally, a random id is created if needed. This option allows control of the id. When multiple images are sent, sequential ids starting from the specified id are used. Valid ids are from 1 to 4294967295. Numbers outside this range are automatically wrapped.",
        
	Default: "0",
})
kitten_icat.Add(cli.OptionSpec{
            Name: "--no-trailing-newline -n",
            Type: "bool-set",
            Dest: "NoTrailingNewline",
            Help: "By default, the cursor is moved to the next line after displaying an image. This option, prevents that. Should not be used when catting multiple images. Also has no effect when the :option:`--place` option is used.",
        })
kitten_icat.ArgCompleter = cli.MimepatCompleter("Images", cli.CWD, "image/*")
kitten_notify := plus_kitten.AddSubCommand(&cli.Command{Name:"notify", Group: "Kittens"})
kitten_notify.Add(cli.OptionSpec{
            Name: "--icon -n",
            Type: "list",
            Dest: "Icon",
            Help: "The name of the icon to use for the notification. An icon with this name will be searched for on the computer running the terminal emulator. Can be specified multiple times, the first name that is found will be used. Standard names: error, file-manager, help, info, question, system-monitor, text-editor, warn, warning",
        })
kitten_notify.Add(cli.OptionSpec{
            Name: "--icon-path -p",
            Type: "",
            Dest: "IconPath",
            Help: "Path to an image file in PNG/JPEG/GIF formats to use as the icon. If both name and path are specified then first the name will be looked for and if not found then the path will be used.",
        })
kitten_notify.Add(cli.OptionSpec{
            Name: "--app-name -a",
            Type: "",
            Dest: "AppName",
            Help: "The application name for the notification.",
        
	Default: "kitten-notify",
})
kitten_notify.Add(cli.OptionSpec{
            Name: "--button -b",
            Type: "list",
            Dest: "Button",
            Help: "Add a button with the specified text to the notification. Can be specified multiple times for multiple buttons. If --wait-till-closed is used then the kitten will print the button number to STDOUT if the user clicks a button. 1 for the first button, 2 for the second button and so on.",
        })
kitten_notify.Add(cli.OptionSpec{
            Name: "--urgency -u",
            Type: "choices",
            Dest: "Urgency",
            Help: "The urgency of the notification.",
        
Choices: "normal, critical, low",

Completer: cli.NamesCompleter("Choices for urgency", "normal", "critical", "low"),
	Default: "normal",
})
kitten_notify.Add(cli.OptionSpec{
            Name: "--expire-after -e",
            Type: "",
            Dest: "ExpireAfter",
            Help: "The duration, for the notification to appear on screen. The default is to use the policy of the OS notification service. A value of :code:`never` means the notification should never expire, however, this may or may not work depending on the policies of the OS notification service. Time is specified in the form NUMBER[SUFFIX] where SUFFIX can be :code:`s` for seconds, :code:`m` for minutes, :code:`h` for hours or :code:`d` for days. Non-integer numbers are allowed. If not specified, seconds is assumed. The notification is guaranteed to be closed automatically after the specified time has elapsed. The notification could be closed before by user action or OS policy.",
        })
kitten_notify.Add(cli.OptionSpec{
            Name: "--sound-name -s",
            Type: "",
            Dest: "SoundName",
            Help: "The name of the sound to play with the notification. :code:`system` means let the notification system use whatever sound it wants. :code:`silent` means prevent any sound from being played. Any other value is passed to the desktop's notification system which may or may not honor it.",
        
	Default: "system",
})
kitten_notify.Add(cli.OptionSpec{
            Name: "--type -t",
            Type: "",
            Dest: "Type",
            Help: "The notification type. Can be any string, it is used by users to create filter rules for notifications, so choose something descriptive of the notification's purpose.",
        })
kitten_notify.Add(cli.OptionSpec{
            Name: "--identifier -i",
            Type: "",
            Dest: "Identifier",
            Help: "The identifier of this notification. If a notification with the same identifier is already displayed, it is replaced/updated.",
        })
kitten_notify.Add(cli.OptionSpec{
            Name: "--print-identifier -P",
            Type: "bool-set",
            Dest: "PrintIdentifier",
            Help: "Print the identifier for the notification to STDOUT. Useful when not specifying your own identifier via the --identifier option.",
        })
kitten_notify.Add(cli.OptionSpec{
            Name: "--wait-for-completion --wait-till-closed -w",
            Type: "bool-set",
            Dest: "WaitTillClosed",
            Help: "Wait until the notification is closed. If the user activates the notification, \"0\" is printed to STDOUT before quitting. If a button on the notification is pressed the number corresponding to the button is printed to STDOUT. Press the Esc or Ctrl+C keys to close the notification manually.",
        })
kitten_notify.Add(cli.OptionSpec{
            Name: "--only-print-escape-code",
            Type: "bool-set",
            Dest: "OnlyPrintEscapeCode",
            Help: "Only print the escape code to STDOUT. Useful if using this kitten as part of a larger application. If this is specified, the --wait-till-closed option will be used for escape code generation, but no actual waiting will be done.",
        })
kitten_notify.Add(cli.OptionSpec{
            Name: "--icon-cache-id -g",
            Type: "",
            Dest: "IconCacheId",
            Help: "Identifier to use when caching icons in the terminal emulator. Using an identifier means that icon data needs to be transmitted only once using --icon-path. Subsequent invocations will use the cached icon data, at least until the terminal instance is restarted. This is useful if this kitten is being used inside a larger application, with --only-print-escape-code.",
        })
kitten_pager := plus_kitten.AddSubCommand(&cli.Command{Name:"pager", Group: "Kittens"})
kitten_pager.Add(cli.OptionSpec{
            Name: "--role",
            Type: "choices",
            Dest: "Role",
            Help: "The role the pager is used for. The default is a standard less like pager.",
        
Choices: "pager, scrollback",

Completer: cli.NamesCompleter("Choices for role", "pager", "scrollback"),
	Default: "pager",
})
kitten_pager.Add(cli.OptionSpec{
            Name: "--follow",
            Type: "bool-set",
            Dest: "Follow",
            Help: "Follow changes in the specified file, automatically scrolling if currently on the last line.",
        })
kitten_pager.ArgCompleter = cli.MimepatCompleter("Text files", cli.CWD, "text/*")
kitten_panel := plus_kitten.AddSubCommand(&cli.Command{Name:"panel", Group: "Kittens"})
kitten_panel.Add(cli.OptionSpec{
            Name: "--lines",
            Type: "",
            Dest: "Lines",
            Help: "The number of lines shown in the panel. Ignored for background, centered, and vertical panels. If it has the suffix :code:`px` then it sets the height of the panel in pixels instead of lines.",
        
	Default: "1",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--columns",
            Type: "",
            Dest: "Columns",
            Help: "The number of columns shown in the panel. Ignored for background, centered, and horizontal panels. If it has the suffix :code:`px` then it sets the width of the panel in pixels instead of columns.",
        
	Default: "1",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--margin-top",
            Type: "int",
            Dest: "MarginTop",
            Help: "Set the top margin for the panel, in pixels. Has no effect for bottom edge panels. Only works on macOS and Wayland compositors that supports the wlr layer shell protocol.",
        
	Default: "0",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--margin-left",
            Type: "int",
            Dest: "MarginLeft",
            Help: "Set the left margin for the panel, in pixels. Has no effect for right edge panels. Only works on macOS and Wayland compositors that supports the wlr layer shell protocol.",
        
	Default: "0",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--margin-bottom",
            Type: "int",
            Dest: "MarginBottom",
            Help: "Set the bottom margin for the panel, in pixels. Has no effect for top edge panels. Only works on macOS and Wayland compositors that supports the wlr layer shell protocol.",
        
	Default: "0",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--margin-right",
            Type: "int",
            Dest: "MarginRight",
            Help: "Set the right margin for the panel, in pixels. Has no effect for left edge panels. Only works on macOS and Wayland compositors that supports the wlr layer shell protocol.",
        
	Default: "0",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--edge",
            Type: "choices",
            Dest: "Edge",
            Help: "Which edge of the screen to place the panel on. Note that some window managers (such as i3) do not support placing docked windows on the left and right edges. The value :code:`background` means make the panel the \"desktop wallpaper\". Note that when using sway if you set a background in your sway config it will cover the background drawn using this kitten. Additionally, there are three more values: :code:`center`, :code:`center-sized` and :code:`none`. The value :code:`center` anchors the panel to all sides and covers the entire display (on macOS the part of the display not covered by titlebar and dock). The panel can be shrunk and placed using the margin parameters. The value :code:`none` anchors the panel to the top left corner and should be placed using the margin parameters. Its size is set by :option:`--lines` and :option:`--columns`. The value :code:`center-sized` is just like :code:`none` except that the panel is centered instead of in the top left corner and the margins have no effect.",
        
Choices: "top, background, bottom, center, center-sized, left, none, right",

Completer: cli.NamesCompleter("Choices for edge", "top", "background", "bottom", "center", "center-sized", "left", "none", "right"),
	Default: "top",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--layer",
            Type: "choices",
            Dest: "Layer",
            Help: "On a Wayland compositor that supports the wlr layer shell protocol, specifies the layer on which the panel should be drawn. This parameter is ignored and set to :code:`background` if :option:`--edge` is set to :code:`background`. On macOS, maps these to appropriate NSWindow *levels*.",
        
Choices: "bottom, background, overlay, top",

Completer: cli.NamesCompleter("Choices for layer", "bottom", "background", "overlay", "top"),
	Default: "bottom",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--config -c",
            Type: "list",
            Dest: "Config",
            Help: "Path to config file to use for kitty when drawing the panel.",
        })
kitten_panel.Add(cli.OptionSpec{
            Name: "--override -o",
            Type: "list",
            Dest: "Override",
            Help: "default= Override individual kitty configuration options, can be specified multiple times. Syntax: :italic:`name=value`. For example: :option:`kitty +kitten panel -o` font_size=20",
        })
kitten_panel.Add(cli.OptionSpec{
            Name: "--output-name",
            Type: "",
            Dest: "OutputName",
            Help: "The panel can only be displayed on a single monitor (output) at a time. This allows you to specify which output is used, by name. If not specified the compositor will choose an output automatically, typically the last output the user interacted with or the primary monitor. Use the special value :code:`list` to get a list of available outputs. Use :code:`listjson` for a json encoded output. Note that on Wayland the output can only be set at panel creation time, it cannot be changed after creation, nor is there anyway to display a single panel on all outputs. Please complain to the Wayland developers about this.",
        })
kitten_panel.Add(cli.OptionSpec{
            Name: "--focus-policy",
            Type: "choices",
            Dest: "FocusPolicy",
            Help: "On a Wayland compositor that supports the wlr layer shell protocol, specify the focus policy for keyboard interactivity with the panel. Please refer to the wlr layer shell protocol documentation for more details. Note that different Wayland compositors behave very differently with :code:`exclusive`, your mileage may vary. On macOS, :code:`exclusive` and :code:`on-demand` are currently the same.",
        
Choices: "not-allowed, exclusive, on-demand",

Completer: cli.NamesCompleter("Choices for focus-policy", "not-allowed", "exclusive", "on-demand"),
	Default: "not-allowed",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--hide-on-focus-loss",
            Type: "bool-set",
            Dest: "HideOnFocusLoss",
            Help: "Automatically hide the panel window when it loses focus. Using this option will force :option:`--focus-policy` to :code:`on-demand`. Note that on Wayland, depending on the compositor, this can result in the window never becoming visible.",
        })
kitten_panel.Add(cli.OptionSpec{
            Name: "--grab-keyboard",
            Type: "bool-set",
            Dest: "GrabKeyboard",
            Help: "Grab the keyboard. This means global shortcuts defined in the OS will be passed to kitty instead. Useful if you want to create an OS modal window. How well this works depends on the OS/window manager/desktop environment. On Wayland it works only if the compositor implements the :link:`inhibit-keyboard-shortcuts protocol <https://wayland.app/protocols/keyboard-shortcuts-inhibit-unstable-v1>`. On macOS Apple doesn't allow applications to grab the keyboard without special permissions, so it doesn't work.",
        })
kitten_panel.Add(cli.OptionSpec{
            Name: "--exclusive-zone",
            Type: "int",
            Dest: "ExclusiveZone",
            Help: "On a Wayland compositor that supports the wlr layer shell protocol, request a given exclusive zone for the panel. Please refer to the wlr layer shell documentation for more details on the meaning of exclusive and its value. If :option:`--edge` is set to anything other than :code:`center` or :code:`none`, this flag will not have any effect unless the flag :option:`--override-exclusive-zone` is also set. If :option:`--edge` is set to :code:`background`, this option has no effect. Ignored on X11 and macOS.",
        
	Default: "-1",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--override-exclusive-zone",
            Type: "bool-set",
            Dest: "OverrideExclusiveZone",
            Help: "On a Wayland compositor that supports the wlr layer shell protocol, override the default exclusive zone. This has effect only if :option:`--edge` is set to :code:`top`, :code:`left`, :code:`bottom` or :code:`right`. Ignored on X11 and macOS.",
        
	Default: "no",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--single-instance -1",
            Type: "bool-set",
            Dest: "SingleInstance",
            Help: "If specified only a single instance of the panel will run. New invocations will instead create a new top-level window in the existing panel instance.",
        
	Default: "no",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--instance-group",
            Type: "",
            Dest: "InstanceGroup",
            Help: "default= Used in combination with the :option:`--single-instance` option. All panel invocations with the same :option:`--instance-group` will result in new panels being created in the first panel instance within that group.",
        })
kitten_panel.Add(cli.OptionSpec{
            Name: "--wait-for-single-instance-window-close",
            Type: "bool-set",
            Dest: "WaitForSingleInstanceWindowClose",
            Help: "Normally, when using :option:`kitty --single-instance`, :italic:`kitty` will open a new window in an existing instance and quit immediately. With this option, it will not quit till the newly opened window is closed. Note that if no previous instance is found, then :italic:`kitty` will wait anyway, regardless of this option.",
        })
kitten_panel.Add(cli.OptionSpec{
            Name: "--listen-on",
            Type: "",
            Dest: "ListenOn",
            Help: "Listen on the specified socket address for control messages. For example, :option:`kitty --listen-on`=unix:/tmp/mykitty or :option:`kitty --listen-on`=tcp:localhost:12345. On Linux systems, you can also use abstract UNIX sockets, not associated with a file, like this: :option:`kitty --listen-on`=unix:@mykitty. Environment variables are expanded and relative paths are resolved with respect to the temporary directory. To control kitty, you can send commands to it with :italic:`kitten @` using the :option:`kitten @ --to` option to specify this address. Note that if you run :italic:`kitten @` within a kitty window, there is no need to specify the :option:`kitten @ --to` option as it will automatically read from the environment. Note that this will be ignored unless :opt:`allow_remote_control` is set to either: :code:`yes`, :code:`socket` or :code:`socket-only`. This can also be specified in :file:`kitty.conf`.",
        Completer: complete_kitty_listen_on,})
kitten_panel.Add(cli.OptionSpec{
            Name: "--toggle-visibility",
            Type: "bool-set",
            Dest: "ToggleVisibility",
            Help: "When set and using :option:`--single-instance` will toggle the visibility of the existing panel rather than creating a new one.",
        
	Default: "no",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--move-to-active-monitor",
            Type: "bool-set",
            Dest: "MoveToActiveMonitor",
            Help: "When set and using :option:`--toggle-visibility` to show an existing panel, the panel is moved to the active monitor (typically the monitor with the mouse on it). This works only if the underlying OS supports it. It is currently supported on macOS only.",
        
	Default: "false",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--start-as-hidden",
            Type: "bool-set",
            Dest: "StartAsHidden",
            Help: "Start in hidden mode, useful with :option:`--toggle-visibility`.",
        
	Default: "no",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--detach",
            Type: "bool-set",
            Dest: "Detach",
            Help: "Detach from the controlling terminal, if any, running in an independent child process, the parent process exits immediately.",
        
	Default: "no",
})
kitten_panel.Add(cli.OptionSpec{
            Name: "--detached-log",
            Type: "",
            Dest: "DetachedLog",
            Help: "default= Path to a log file to store STDOUT/STDERR when using :option:`--detach`",
        })
kitten_panel.Add(cli.OptionSpec{
            Name: "--debug-rendering",
            Type: "bool-set",
            Dest: "DebugRendering",
            Help: "For internal debugging use.",
        })
kitten_panel.Add(cli.OptionSpec{
            Name: "--debug-input",
            Type: "bool-set",
            Dest: "DebugInput",
            Help: "For internal debugging use.",
        })
kitten_query_terminal := plus_kitten.AddSubCommand(&cli.Command{Name:"query_terminal", Group: "Kittens"})
kitten_query_terminal.Add(cli.OptionSpec{
            Name: "--wait-for",
            Type: "float",
            Dest: "WaitFor",
            Help: "The amount of time (in seconds) to wait for a response from the terminal, after querying it.",
        
	Default: "10",
})
kitten_quick_access_terminal := plus_kitten.AddSubCommand(&cli.Command{Name:"quick_access_terminal", Group: "Kittens"})
kitten_quick_access_terminal.Add(cli.OptionSpec{
            Name: "--config -c",
            Type: "list",
            Dest: "Config",
            Help: "Specify a path to the configuration file(s) to use. All configuration files are merged onto the builtin :file:`quick-access-terminal.conf`, overriding the builtin values. This option can be specified multiple times to read multiple configuration files in sequence, which are merged. Use the special value :code:`NONE` to not load any config file.\n\nIf this option is not specified, config files are searched for in the order: :file:`$XDG_CONFIG_HOME/kitty/quick-access-terminal.conf`, :file:`~/.config/kitty/quick-access-terminal.conf`, :file:`~/Library/Preferences/kitty/quick-access-terminal.conf`, :file:`$XDG_CONFIG_DIRS/kitty/quick-access-terminal.conf`. The first one that exists is used as the config file.\n\nIf the environment variable :envvar:`KITTY_CONFIG_DIRECTORY` is specified, that directory is always used and the above searching does not happen.\n\nIf :file:`/etc/xdg/kitty/quick-access-terminal.conf` exists, it is merged before (i.e. with lower priority) than any user config files. It can be used to specify system-wide defaults for all users. You can use either :code:`-` or :file:`/dev/stdin` to read the config from STDIN.",
        Completer: cli.ChainCompleters(cli.NamesCompleter("Keywords", "none", "NONE"), cli.FnmatchCompleter("Config files", cli.CWD, "*.conf")),})
kitten_quick_access_terminal.Add(cli.OptionSpec{
            Name: "--override -o",
            Type: "list",
            Dest: "Override",
            Help: "Override individual configuration options, can be specified multiple times. Syntax: :italic:`name=value`. For example: :italic:`-o lines=12`",
        })
kitten_quick_access_terminal.Add(cli.OptionSpec{
            Name: "--detach",
            Type: "bool-set",
            Dest: "Detach",
            Help: "Detach from the controlling terminal, if any, running in an independent child process, the parent process exits immediately.",
        })
kitten_quick_access_terminal.Add(cli.OptionSpec{
            Name: "--detached-log",
            Type: "",
            Dest: "DetachedLog",
            Help: "Path to a log file to store STDOUT/STDERR when using :option:`--detach`",
        })
kitten_quick_access_terminal.Add(cli.OptionSpec{
            Name: "--instance-group",
            Type: "",
            Dest: "InstanceGroup",
            Help: "The unique name of this quick access terminal Use a different name if you want multiple such terminals.",
        
	Default: "quick-access",
})
kitten_quick_access_terminal.Add(cli.OptionSpec{
            Name: "--debug-rendering",
            Type: "bool-set",
            Dest: "DebugRendering",
            Help: "For debugging interactions with the compositor/window manager.",
        })
kitten_quick_access_terminal.Add(cli.OptionSpec{
            Name: "--debug-input",
            Type: "bool-set",
            Dest: "DebugInput",
            Help: "For debugging interactions with the compositor/window manager.",
        })
kitten_remote_file := plus_kitten.AddSubCommand(&cli.Command{Name:"remote_file", Group: "Kittens"})
kitten_remote_file.HelpText = ""
kitten_resize_window := plus_kitten.AddSubCommand(&cli.Command{Name:"resize_window", Group: "Kittens"})
kitten_resize_window.HelpText = ""
kitten_show_key := plus_kitten.AddSubCommand(&cli.Command{Name:"show_key", Group: "Kittens"})
kitten_show_key.Add(cli.OptionSpec{
            Name: "--key-mode -m",
            Type: "choices",
            Dest: "KeyMode",
            Help: "The keyboard mode to use when showing keys. :code:`normal` mode is with DECCKM reset and :code:`application` mode is with DECCKM set. :code:`kitty` is the full kitty extended keyboard protocol.",
        
Choices: "normal, application, kitty, unchanged",

Completer: cli.NamesCompleter("Choices for key-mode", "normal", "application", "kitty", "unchanged"),
	Default: "normal",
})
kitten_ssh := plus_kitten.AddSubCommand(&cli.Command{Name:"ssh", Group: "Kittens"})
kitten_ssh.ArgCompleter = cli.CompletionForWrapper("ssh")
kitten_ssh.OnlyArgsAllowed = true
kitten_themes := plus_kitten.AddSubCommand(&cli.Command{Name:"themes", Group: "Kittens"})
kitten_themes.Add(cli.OptionSpec{
            Name: "--cache-age",
            Type: "float",
            Dest: "CacheAge",
            Help: "Check for new themes only after the specified number of days. A value of zero will always check for new themes. A negative value will never check for new themes, instead raising an error if a local copy of the themes is not available.",
        
	Default: "1",
})
kitten_themes.Add(cli.OptionSpec{
            Name: "--reload-in",
            Type: "choices",
            Dest: "ReloadIn",
            Help: "By default, this kitten will signal only the parent kitty instance it is running in to reload its config, after making changes. Use this option to instead either not reload the config at all or in all running kitty instances.",
        
Choices: "parent, all, none",

Completer: cli.NamesCompleter("Choices for reload-in", "parent", "all", "none"),
	Default: "parent",
})
kitten_themes.Add(cli.OptionSpec{
            Name: "--dump-theme",
            Type: "bool-set",
            Dest: "DumpTheme",
            Help: "When running non-interactively, dump the specified theme to STDOUT instead of changing kitty.conf.",
        
	Default: "false",
})
kitten_themes.Add(cli.OptionSpec{
            Name: "--config-file-name",
            Type: "",
            Dest: "ConfigFileName",
            Help: "The name or path to the config file to edit. Relative paths are interpreted with respect to the kitty config directory. By default the kitty config file, kitty.conf is edited. This is most useful if you add :code:`include themes.conf` to your kitty.conf and then have the kitten operate only on :file:`themes.conf`, allowing :code:`kitty.conf` to remain unchanged.",
        
	Default: "kitty.conf",
})
kitten_themes.ArgCompleter = complete_themes
kitten_transfer := plus_kitten.AddSubCommand(&cli.Command{Name:"transfer", Group: "Kittens"})
kitten_transfer.Add(cli.OptionSpec{
            Name: "--direction -d",
            Type: "choices",
            Dest: "Direction",
            Help: "Whether to send or receive files. :code:`send` or :code:`download` copy files from the computer on which the kitten is running (usually the remote computer) to the local computer. :code:`receive` or :code:`upload` copy files from the local computer to the remote computer.",
        
Choices: "download, receive, send, upload",

Completer: cli.NamesCompleter("Choices for direction", "download", "receive", "send", "upload"),
	Default: "download",
})
kitten_transfer.Add(cli.OptionSpec{
            Name: "--mode -m",
            Type: "choices",
            Dest: "Mode",
            Help: "How to interpret command line arguments. In :code:`mirror` mode all arguments are assumed to be files/dirs on the sending computer and they are mirrored onto the receiving computer. Files under the HOME directory are copied to the HOME directory on the receiving computer even if the HOME directory is different. In :code:`normal` mode the last argument is assumed to be a destination path on the receiving computer. The last argument must be an existing directory unless copying a single file. When it is a directory it should end with a trailing slash.",
        
Choices: "normal, mirror",

Completer: cli.NamesCompleter("Choices for mode", "normal", "mirror"),
	Default: "normal",
})
kitten_transfer.Add(cli.OptionSpec{
            Name: "--compress",
            Type: "choices",
            Dest: "Compress",
            Help: "Whether to compress data being sent. By default compression is enabled based on the type of file being sent. For files recognized as being already compressed, compression is turned off as it just wastes CPU cycles.",
        
Choices: "auto, always, never",

Completer: cli.NamesCompleter("Choices for compress", "auto", "always", "never"),
	Default: "auto",
})
kitten_transfer.Add(cli.OptionSpec{
            Name: "--permissions-bypass -p",
            Type: "",
            Dest: "PermissionsBypass",
            Help: "The password to use to skip the transfer confirmation popup in kitty. Must match the password set for the :opt:`file_transfer_confirmation_bypass` option in :file:`kitty.conf`. Note that leading and trailing whitespace is removed from the password. A password starting with :code:`.`, :code:`/` or :code:`~` characters is assumed to be a file name to read the password from. A value of :code:`-` means read the password from STDIN. A password that is purely a number less than 256 is assumed to be the number of a file descriptor from which to read the actual password.",
        })
kitten_transfer.Add(cli.OptionSpec{
            Name: "--confirm-paths -c",
            Type: "bool-set",
            Dest: "ConfirmPaths",
            Help: "Before actually transferring files, show a mapping of local file names to remote file names and ask for confirmation.",
        })
kitten_transfer.Add(cli.OptionSpec{
            Name: "--transmit-deltas -x",
            Type: "bool-set",
            Dest: "TransmitDeltas",
            Help: "If a file on the receiving side already exists, use the rsync algorithm to update it to match the file on the sending side, potentially saving lots of bandwidth and also automatically resuming partial transfers. Note that this will actually degrade performance on fast links or with small files, so use with care.",
        })
kitten_transfer.ArgCompleter = cli.FnmatchCompleter("Files", cli.CWD, "*")
kitten_unicode_input := plus_kitten.AddSubCommand(&cli.Command{Name:"unicode_input", Group: "Kittens"})
kitten_unicode_input.Add(cli.OptionSpec{
            Name: "--emoji-variation",
            Type: "choices",
            Dest: "EmojiVariation",
            Help: "Whether to use the textual or the graphical form for emoji. By default the default form specified in the Unicode standard for the symbol is used.",
        
Choices: "none, graphic, text",

Completer: cli.NamesCompleter("Choices for emoji-variation", "none", "graphic", "text"),
	Default: "none",
})
kitten_unicode_input.Add(cli.OptionSpec{
            Name: "--tab",
            Type: "choices",
            Dest: "Tab",
            Help: "The initial tab to display. Defaults to using the tab from the previous kitten invocation.",
        
Choices: "previous, code, emoticons, favorites, name",

Completer: cli.NamesCompleter("Choices for tab", "previous", "code", "emoticons", "favorites", "name"),
	Default: "previous",
})
k.AddClone("", plus_kitten).Name = "+kitten"
at.EntryPoint(k)
cik := root.AddSubCommand(&cli.Command{Name:"clone-in-kitty"})
cik.Add(cli.OptionSpec{
            Name: "--title --window-title",
            Type: "",
            Dest: "WindowTitle",
            Help: "The title to set for the new window. By default, title is controlled by the child process. The special value :code:`current` will copy the title from the :option:`source window <launch --source-window>`.",
        })
cik.Add(cli.OptionSpec{
            Name: "--tab-title",
            Type: "",
            Dest: "TabTitle",
            Help: "The title for the new tab if launching in a new tab. By default, the title of the active window in the tab is used as the tab title. The special value :code:`current` will copy the title from the tab containing the :option:`source window <launch --source-window>`.",
        })
cik.Add(cli.OptionSpec{
            Name: "--type",
            Type: "choices",
            Dest: "Type",
            Help: "Where to launch the child process:\n\n:code:`window`\n    A new :term:`kitty window <window>` in the current tab\n\n:code:`tab`\n    A new :term:`tab` in the current OS window. Not available when the :doc:`launch <launch>` command is used in :ref:`startup sessions <sessions>`.\n\n:code:`os-window`\n    A new :term:`operating system window <os_window>`.  Not available when the :doc:`launch <launch>` command is used in :ref:`startup sessions <sessions>`.\n\n:code:`overlay`\n    An :term:`overlay window <overlay>` covering the current active kitty window\n\n:code:`overlay-main`\n    An :term:`overlay window <overlay>` covering the current active kitty window. Unlike a plain overlay window, this window is considered as a :italic:`main` window which means it is used as the active window for getting the current working directory, the input text for kittens, launch commands, etc. Useful if this overlay is intended to run for a long time as a primary window.\n\n:code:`background`\n    The process will be run in the :italic:`background`, without a kitty window. Note that if :option:`kitten @ launch --allow-remote-control` is specified the :envvar:`KITTY_LISTEN_ON` environment variable will be set to a dedicated socket pair file descriptor that the process can use for remote control.\n\n:code:`clipboard`, :code:`primary`\n    These two are meant to work with :option:`--stdin-source <launch --stdin-source>` to copy data to the :italic:`system clipboard` or :italic:`primary selection`.\n\n:code:`os-panel`\n    Similar to :code:`os-window`, except that it creates the new OS Window as a desktop panel. Only works on platforms that support this, such as Wayand compositors that support the layer shell protocol. Use the :option:`kitten @ launch --os-panel` option to configure the panel.\n\n#placeholder_for_formatting#",
        
Choices: "window, background, clipboard, os-panel, os-window, overlay, overlay-main, primary, tab",

Completer: cli.NamesCompleter("Choices for type", "window", "background", "clipboard", "os-panel", "os-window", "overlay", "overlay-main", "primary", "tab"),
	Default: "window",
})
cik.Add(cli.OptionSpec{
            Name: "--dont-take-focus --keep-focus",
            Type: "bool-set",
            Dest: "KeepFocus",
            Help: "Keep the focus on the currently active window instead of switching to the newly opened window.",
        })
cik.Add(cli.OptionSpec{
            Name: "--cwd",
            Type: "",
            Dest: "Cwd",
            Help: "The working directory for the newly launched child. Use the special value :code:`current` to use the working directory of the :option:`source window <launch --source-window>` The special value :code:`last_reported` uses the last working directory reported by the shell (needs :ref:`shell_integration` to work). The special value :code:`oldest` works like :code:`current` but uses the working directory of the oldest foreground process associated with the currently active window rather than the newest foreground process. Finally, the special value :code:`root` refers to the process that was originally started when the window was created.\n\nWhen opening in the same working directory as the current window causes the new window to connect to a remote host, you can use the :option:`--hold-after-ssh` flag to prevent the new window from closing when the connection is terminated.",
        Completer: cli.ChainCompleters(cli.NamesCompleter("Keywords", "current", "oldest", "last_reported", "root"), cli.DirectoryCompleter("Directories", cli.CWD)),})
cik.Add(cli.OptionSpec{
            Name: "--env",
            Type: "list",
            Dest: "Env",
            Help: "Environment variables to set in the child process. Can be specified multiple times to set different environment variables. Syntax: :code:`name=value`. Using :code:`name=` will set to empty string and just :code:`name` will remove the environment variable.",
        })
cik.Add(cli.OptionSpec{
            Name: "--var",
            Type: "list",
            Dest: "Var",
            Help: "User variables to set in the created window. Can be specified multiple times to set different user variables. Syntax: :code:`name=value`. Using :code:`name=` will set to empty string.",
        })
cik.Add(cli.OptionSpec{
            Name: "--hold",
            Type: "bool-set",
            Dest: "Hold",
            Help: "Keep the window open even after the command being executed exits, at a shell prompt. The shell will be run after the launched command exits.",
        })
cik.Add(cli.OptionSpec{
            Name: "--location",
            Type: "choices",
            Dest: "Location",
            Help: "Where to place the newly created window when it is added to a tab which already has existing windows in it. :code:`after` and :code:`before` place the new window before or after the active window. :code:`neighbor` is a synonym for :code:`after`. Also applies to creating a new tab, where the value of :code:`after` will cause the new tab to be placed next to the current tab instead of at the end. The values of :code:`vsplit`, :code:`hsplit` and :code:`split` are only used by the :code:`splits` layout and control if the new window is placed in a vertical, horizontal or automatic split with the currently active window. The default is to place the window in a layout dependent manner, typically, after the currently active window. See :option:`--next-to <launch --next-to>` to use a window other than the currently active window.",
        
Choices: "default, after, before, first, hsplit, last, neighbor, split, vsplit",

Completer: cli.NamesCompleter("Choices for location", "default", "after", "before", "first", "hsplit", "last", "neighbor", "split", "vsplit"),
	Default: "default",
})
cik.Add(cli.OptionSpec{
            Name: "--next-to",
            Type: "",
            Dest: "NextTo",
            Help: "A match expression to select the window next to which the new window is created. See :ref:`search_syntax` for the syntax for specifying windows. If not specified defaults to the active window. When used via remote control and a target tab is specified this option is ignored unless the matched window is in the specified tab. When using :option:`--type <launch --type>` of :code:`tab`, the tab will be created in the OS Window containing the matched window.",
        })
cik.Add(cli.OptionSpec{
            Name: "--os-window-class",
            Type: "",
            Dest: "OsWindowClass",
            Help: "Set the :italic:`WM_CLASS` property on X11 and the application id property on Wayland for the newly created OS window when using :option:`--type=os-window <launch --type>`. Defaults to whatever is used by the parent kitty process, which in turn defaults to :code:`kitty`.",
        })
cik.Add(cli.OptionSpec{
            Name: "--os-window-name",
            Type: "",
            Dest: "OsWindowName",
            Help: "Set the :italic:`WM_NAME` property on X11 for the newly created OS Window when using :option:`--type=os-window <launch --type>`. Defaults to :option:`--os-window-class <launch --os-window-class>`.",
        })
cik.Add(cli.OptionSpec{
            Name: "--os-window-title",
            Type: "",
            Dest: "OsWindowTitle",
            Help: "Set the title for the newly created OS window. This title will override any titles set by programs running in kitty. The special value :code:`current` will copy the title from the OS Window containing the :option:`source window <launch --source-window>`.",
        })
cik.Add(cli.OptionSpec{
            Name: "--os-window-state",
            Type: "choices",
            Dest: "OsWindowState",
            Help: "The initial state for the newly created OS Window.",
        
Choices: "normal, fullscreen, maximized, minimized",

Completer: cli.NamesCompleter("Choices for os-window-state", "normal", "fullscreen", "maximized", "minimized"),
	Default: "normal",
})
cik.Add(cli.OptionSpec{
            Name: "--logo",
            Type: "",
            Dest: "Logo",
            Help: "Path to a PNG image to use as the logo for the newly created window. See :opt:`window_logo_path`. Relative paths are resolved from the kitty configuration directory.",
        Completer: cli.FnmatchCompleter("PNG images", cli.CONFIG, "*.png"),})
cik.Add(cli.OptionSpec{
            Name: "--logo-position",
            Type: "",
            Dest: "LogoPosition",
            Help: "The position for the window logo. Only takes effect if :option:`--logo` is specified. See :opt:`window_logo_position`.",
        })
cik.Add(cli.OptionSpec{
            Name: "--logo-alpha",
            Type: "float",
            Dest: "LogoAlpha",
            Help: "The amount the window logo should be faded into the background. Only takes effect if :option:`--logo` is specified. See :opt:`window_logo_alpha`.",
        
	Default: "-1",
})
cik.Add(cli.OptionSpec{
            Name: "--color",
            Type: "list",
            Dest: "Color",
            Help: "Change colors in the newly launched window. You can either specify a path to a :file:`.conf` file with the same syntax as :file:`kitty.conf` to read the colors from, or specify them individually, for example::\n\n    --color background=white --color foreground=red",
        })
cik.Add(cli.OptionSpec{
            Name: "--spacing",
            Type: "list",
            Dest: "Spacing",
            Help: "Set the margin and padding for the newly created window. For example: :code:`margin=20` or :code:`padding-left=10` or :code:`margin-h=30`. The shorthand form sets all values, the :code:`*-h` and :code:`*-v` variants set horizontal and vertical values. Can be specified multiple times. Note that this is ignored for overlay windows as these use the settings from the base window.",
        })
cik.Add(cli.OptionSpec{
            Name: "--hold-after-ssh",
            Type: "bool-set",
            Dest: "HoldAfterSsh",
            Help: "When using :option:`--cwd`:code:`=current` or similar from a window that is running the ssh kitten, the new window will run a local shell after disconnecting from the remote host, when this option is specified.",
        })
}
func init() {
cli.RegisterExeForCompletion(kitty)
}
