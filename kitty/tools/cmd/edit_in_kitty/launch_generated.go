// Code generated by go_code.py; DO NOT EDIT.

package edit_in_kitty
import "github.com/kovidgoyal/kitty/tools/cli"
func AddCloneSafeOpts(cmd *cli.Command) {
cmd.Add(cli.OptionSpec{
            Name: "--title --window-title",
            Type: "",
            Dest: "WindowTitle",
            Help: "The title to set for the new window. By default, title is controlled by the child process. The special value :code:`current` will copy the title from the :option:`source window <launch --source-window>`.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--tab-title",
            Type: "",
            Dest: "TabTitle",
            Help: "The title for the new tab if launching in a new tab. By default, the title of the active window in the tab is used as the tab title. The special value :code:`current` will copy the title from the tab containing the :option:`source window <launch --source-window>`.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--type",
            Type: "choices",
            Dest: "Type",
            Help: "Where to launch the child process:\n\n:code:`window`\n    A new :term:`kitty window <window>` in the current tab\n\n:code:`tab`\n    A new :term:`tab` in the current OS window. Not available when the :doc:`launch <launch>` command is used in :ref:`startup sessions <sessions>`.\n\n:code:`os-window`\n    A new :term:`operating system window <os_window>`.  Not available when the :doc:`launch <launch>` command is used in :ref:`startup sessions <sessions>`.\n\n:code:`overlay`\n    An :term:`overlay window <overlay>` covering the current active kitty window\n\n:code:`overlay-main`\n    An :term:`overlay window <overlay>` covering the current active kitty window. Unlike a plain overlay window, this window is considered as a :italic:`main` window which means it is used as the active window for getting the current working directory, the input text for kittens, launch commands, etc. Useful if this overlay is intended to run for a long time as a primary window.\n\n:code:`background`\n    The process will be run in the :italic:`background`, without a kitty window. Note that if :option:`kitten @ launch --allow-remote-control` is specified the :envvar:`KITTY_LISTEN_ON` environment variable will be set to a dedicated socket pair file descriptor that the process can use for remote control.\n\n:code:`clipboard`, :code:`primary`\n    These two are meant to work with :option:`--stdin-source <launch --stdin-source>` to copy data to the :italic:`system clipboard` or :italic:`primary selection`.\n\n:code:`os-panel`\n    Similar to :code:`os-window`, except that it creates the new OS Window as a desktop panel. Only works on platforms that support this, such as Wayand compositors that support the layer shell protocol. Use the :option:`kitten @ launch --os-panel` option to configure the panel.\n\n#placeholder_for_formatting#",
        
Choices: "window, background, clipboard, os-panel, os-window, overlay, overlay-main, primary, tab",

Completer: cli.NamesCompleter("Choices for type", "window", "background", "clipboard", "os-panel", "os-window", "overlay", "overlay-main", "primary", "tab"),
	Default: "window",
})
cmd.Add(cli.OptionSpec{
            Name: "--dont-take-focus --keep-focus",
            Type: "bool-set",
            Dest: "KeepFocus",
            Help: "Keep the focus on the currently active window instead of switching to the newly opened window.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--cwd",
            Type: "",
            Dest: "Cwd",
            Help: "The working directory for the newly launched child. Use the special value :code:`current` to use the working directory of the :option:`source window <launch --source-window>` The special value :code:`last_reported` uses the last working directory reported by the shell (needs :ref:`shell_integration` to work). The special value :code:`oldest` works like :code:`current` but uses the working directory of the oldest foreground process associated with the currently active window rather than the newest foreground process. Finally, the special value :code:`root` refers to the process that was originally started when the window was created.\n\nWhen opening in the same working directory as the current window causes the new window to connect to a remote host, you can use the :option:`--hold-after-ssh` flag to prevent the new window from closing when the connection is terminated.",
        Completer: cli.ChainCompleters(cli.NamesCompleter("Keywords", "current", "oldest", "last_reported", "root"), cli.DirectoryCompleter("Directories", cli.CWD)),})
cmd.Add(cli.OptionSpec{
            Name: "--env",
            Type: "list",
            Dest: "Env",
            Help: "Environment variables to set in the child process. Can be specified multiple times to set different environment variables. Syntax: :code:`name=value`. Using :code:`name=` will set to empty string and just :code:`name` will remove the environment variable.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--var",
            Type: "list",
            Dest: "Var",
            Help: "User variables to set in the created window. Can be specified multiple times to set different user variables. Syntax: :code:`name=value`. Using :code:`name=` will set to empty string.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--hold",
            Type: "bool-set",
            Dest: "Hold",
            Help: "Keep the window open even after the command being executed exits, at a shell prompt. The shell will be run after the launched command exits.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--location",
            Type: "choices",
            Dest: "Location",
            Help: "Where to place the newly created window when it is added to a tab which already has existing windows in it. :code:`after` and :code:`before` place the new window before or after the active window. :code:`neighbor` is a synonym for :code:`after`. Also applies to creating a new tab, where the value of :code:`after` will cause the new tab to be placed next to the current tab instead of at the end. The values of :code:`vsplit`, :code:`hsplit` and :code:`split` are only used by the :code:`splits` layout and control if the new window is placed in a vertical, horizontal or automatic split with the currently active window. The default is to place the window in a layout dependent manner, typically, after the currently active window. See :option:`--next-to <launch --next-to>` to use a window other than the currently active window.",
        
Choices: "default, after, before, first, hsplit, last, neighbor, split, vsplit",

Completer: cli.NamesCompleter("Choices for location", "default", "after", "before", "first", "hsplit", "last", "neighbor", "split", "vsplit"),
	Default: "default",
})
cmd.Add(cli.OptionSpec{
            Name: "--next-to",
            Type: "",
            Dest: "NextTo",
            Help: "A match expression to select the window next to which the new window is created. See :ref:`search_syntax` for the syntax for specifying windows. If not specified defaults to the active window. When used via remote control and a target tab is specified this option is ignored unless the matched window is in the specified tab. When using :option:`--type <launch --type>` of :code:`tab`, the tab will be created in the OS Window containing the matched window.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--os-window-class",
            Type: "",
            Dest: "OsWindowClass",
            Help: "Set the :italic:`WM_CLASS` property on X11 and the application id property on Wayland for the newly created OS window when using :option:`--type=os-window <launch --type>`. Defaults to whatever is used by the parent kitty process, which in turn defaults to :code:`kitty`.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--os-window-name",
            Type: "",
            Dest: "OsWindowName",
            Help: "Set the :italic:`WM_NAME` property on X11 for the newly created OS Window when using :option:`--type=os-window <launch --type>`. Defaults to :option:`--os-window-class <launch --os-window-class>`.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--os-window-title",
            Type: "",
            Dest: "OsWindowTitle",
            Help: "Set the title for the newly created OS window. This title will override any titles set by programs running in kitty. The special value :code:`current` will copy the title from the OS Window containing the :option:`source window <launch --source-window>`.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--os-window-state",
            Type: "choices",
            Dest: "OsWindowState",
            Help: "The initial state for the newly created OS Window.",
        
Choices: "normal, fullscreen, maximized, minimized",

Completer: cli.NamesCompleter("Choices for os-window-state", "normal", "fullscreen", "maximized", "minimized"),
	Default: "normal",
})
cmd.Add(cli.OptionSpec{
            Name: "--logo",
            Type: "",
            Dest: "Logo",
            Help: "Path to a PNG image to use as the logo for the newly created window. See :opt:`window_logo_path`. Relative paths are resolved from the kitty configuration directory.",
        Completer: cli.FnmatchCompleter("PNG images", cli.CONFIG, "*.png"),})
cmd.Add(cli.OptionSpec{
            Name: "--logo-position",
            Type: "",
            Dest: "LogoPosition",
            Help: "The position for the window logo. Only takes effect if :option:`--logo` is specified. See :opt:`window_logo_position`.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--logo-alpha",
            Type: "float",
            Dest: "LogoAlpha",
            Help: "The amount the window logo should be faded into the background. Only takes effect if :option:`--logo` is specified. See :opt:`window_logo_alpha`.",
        
	Default: "-1",
})
cmd.Add(cli.OptionSpec{
            Name: "--color",
            Type: "list",
            Dest: "Color",
            Help: "Change colors in the newly launched window. You can either specify a path to a :file:`.conf` file with the same syntax as :file:`kitty.conf` to read the colors from, or specify them individually, for example::\n\n    --color background=white --color foreground=red",
        })
cmd.Add(cli.OptionSpec{
            Name: "--spacing",
            Type: "list",
            Dest: "Spacing",
            Help: "Set the margin and padding for the newly created window. For example: :code:`margin=20` or :code:`padding-left=10` or :code:`margin-h=30`. The shorthand form sets all values, the :code:`*-h` and :code:`*-v` variants set horizontal and vertical values. Can be specified multiple times. Note that this is ignored for overlay windows as these use the settings from the base window.",
        })
cmd.Add(cli.OptionSpec{
            Name: "--hold-after-ssh",
            Type: "bool-set",
            Dest: "HoldAfterSsh",
            Help: "When using :option:`--cwd`:code:`=current` or similar from a window that is running the ssh kitten, the new window will run a local shell after disconnecting from the remote host, when this option is specified.",
        })
cmd.ArgCompleter = cli.MimepatCompleter("Text files", cli.CWD, "text/*")
}
